// Code generated by MockGen. DO NOT EDIT.
// Source: internal/domain/repository/metadata_repository.go

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	context "context"
	reflect "reflect"

	domain "github.com/bloock/bloock-managed-api/internal/domain"
	record "github.com/bloock/bloock-sdk-go/v2/entity/record"
	gomock "github.com/golang/mock/gomock"
)

// MockMetadataRepository is a mock of MetadataRepository interface.
type MockMetadataRepository struct {
	ctrl     *gomock.Controller
	recorder *MockMetadataRepositoryMockRecorder
}

// MockMetadataRepositoryMockRecorder is the mock recorder for MockMetadataRepository.
type MockMetadataRepositoryMockRecorder struct {
	mock *MockMetadataRepository
}

// NewMockMetadataRepository creates a new mock instance.
func NewMockMetadataRepository(ctrl *gomock.Controller) *MockMetadataRepository {
	mock := &MockMetadataRepository{ctrl: ctrl}
	mock.recorder = &MockMetadataRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMetadataRepository) EXPECT() *MockMetadataRepositoryMockRecorder {
	return m.recorder
}

// ExistCertificationByHash mocks base method.
func (m *MockMetadataRepository) ExistCertificationByHash(ctx context.Context, hash string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExistCertificationByHash", ctx, hash)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExistCertificationByHash indicates an expected call of ExistCertificationByHash.
func (mr *MockMetadataRepositoryMockRecorder) ExistCertificationByHash(ctx, hash interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExistCertificationByHash", reflect.TypeOf((*MockMetadataRepository)(nil).ExistCertificationByHash), ctx, hash)
}

// GetCertificationsByAnchorID mocks base method.
func (m *MockMetadataRepository) GetCertificationsByAnchorID(ctx context.Context, anchor int) ([]domain.Certification, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCertificationsByAnchorID", ctx, anchor)
	ret0, _ := ret[0].([]domain.Certification)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCertificationsByAnchorID indicates an expected call of GetCertificationsByAnchorID.
func (mr *MockMetadataRepositoryMockRecorder) GetCertificationsByAnchorID(ctx, anchor interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCertificationsByAnchorID", reflect.TypeOf((*MockMetadataRepository)(nil).GetCertificationsByAnchorID), ctx, anchor)
}

// GetFileHash mocks base method.
func (m *MockMetadataRepository) GetFileHash(ctx context.Context, file []byte) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFileHash", ctx, file)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFileHash indicates an expected call of GetFileHash.
func (mr *MockMetadataRepositoryMockRecorder) GetFileHash(ctx, file interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFileHash", reflect.TypeOf((*MockMetadataRepository)(nil).GetFileHash), ctx, file)
}

// GetRecord mocks base method.
func (m *MockMetadataRepository) GetRecord(ctx context.Context, file []byte) (*record.Record, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRecord", ctx, file)
	ret0, _ := ret[0].(*record.Record)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRecord indicates an expected call of GetRecord.
func (mr *MockMetadataRepositoryMockRecorder) GetRecord(ctx, file interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRecord", reflect.TypeOf((*MockMetadataRepository)(nil).GetRecord), ctx, file)
}

// GetRecordDetails mocks base method.
func (m *MockMetadataRepository) GetRecordDetails(ctx context.Context, file []byte) (*record.RecordDetails, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRecordDetails", ctx, file)
	ret0, _ := ret[0].(*record.RecordDetails)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRecordDetails indicates an expected call of GetRecordDetails.
func (mr *MockMetadataRepositoryMockRecorder) GetRecordDetails(ctx, file interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRecordDetails", reflect.TypeOf((*MockMetadataRepository)(nil).GetRecordDetails), ctx, file)
}

// SaveCertification mocks base method.
func (m *MockMetadataRepository) SaveCertification(ctx context.Context, certification domain.Certification) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveCertification", ctx, certification)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveCertification indicates an expected call of SaveCertification.
func (mr *MockMetadataRepositoryMockRecorder) SaveCertification(ctx, certification interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveCertification", reflect.TypeOf((*MockMetadataRepository)(nil).SaveCertification), ctx, certification)
}

// UpdateCertification mocks base method.
func (m *MockMetadataRepository) UpdateCertification(ctx context.Context, certification domain.Certification) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCertification", ctx, certification)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateCertification indicates an expected call of UpdateCertification.
func (mr *MockMetadataRepositoryMockRecorder) UpdateCertification(ctx, certification interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCertification", reflect.TypeOf((*MockMetadataRepository)(nil).UpdateCertification), ctx, certification)
}

// UpdateCertificationDataID mocks base method.
func (m *MockMetadataRepository) UpdateCertificationDataID(ctx context.Context, certification domain.Certification) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCertificationDataID", ctx, certification)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateCertificationDataID indicates an expected call of UpdateCertificationDataID.
func (mr *MockMetadataRepositoryMockRecorder) UpdateCertificationDataID(ctx, certification interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCertificationDataID", reflect.TypeOf((*MockMetadataRepository)(nil).UpdateCertificationDataID), ctx, certification)
}
