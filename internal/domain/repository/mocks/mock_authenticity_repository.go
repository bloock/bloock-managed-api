// Code generated by MockGen. DO NOT EDIT.
// Source: internal/domain/repository/authenticity_repository.go

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	context "context"
	reflect "reflect"

	key "github.com/bloock/bloock-sdk-go/v2/entity/key"
	record "github.com/bloock/bloock-sdk-go/v2/entity/record"
	gomock "github.com/golang/mock/gomock"
)

// MockAuthenticityRepository is a mock of AuthenticityRepository interface.
type MockAuthenticityRepository struct {
	ctrl     *gomock.Controller
	recorder *MockAuthenticityRepositoryMockRecorder
}

// MockAuthenticityRepositoryMockRecorder is the mock recorder for MockAuthenticityRepository.
type MockAuthenticityRepositoryMockRecorder struct {
	mock *MockAuthenticityRepository
}

// NewMockAuthenticityRepository creates a new mock instance.
func NewMockAuthenticityRepository(ctrl *gomock.Controller) *MockAuthenticityRepository {
	mock := &MockAuthenticityRepository{ctrl: ctrl}
	mock.recorder = &MockAuthenticityRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuthenticityRepository) EXPECT() *MockAuthenticityRepositoryMockRecorder {
	return m.recorder
}

// SignECWithLocalKey mocks base method.
func (m *MockAuthenticityRepository) SignECWithLocalKey(ctx context.Context, data []byte, kty key.KeyType, publicKey string, privateKey *string) (string, *record.Record, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SignECWithLocalKey", ctx, data, kty, publicKey, privateKey)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(*record.Record)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// SignECWithLocalKey indicates an expected call of SignECWithLocalKey.
func (mr *MockAuthenticityRepositoryMockRecorder) SignECWithLocalKey(ctx, data, kty, publicKey, privateKey interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SignECWithLocalKey", reflect.TypeOf((*MockAuthenticityRepository)(nil).SignECWithLocalKey), ctx, data, kty, publicKey, privateKey)
}

// SignECWithLocalKeyEns mocks base method.
func (m *MockAuthenticityRepository) SignECWithLocalKeyEns(ctx context.Context, data []byte, kty key.KeyType, publicKey string, privateKey *string) (string, *record.Record, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SignECWithLocalKeyEns", ctx, data, kty, publicKey, privateKey)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(*record.Record)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// SignECWithLocalKeyEns indicates an expected call of SignECWithLocalKeyEns.
func (mr *MockAuthenticityRepositoryMockRecorder) SignECWithLocalKeyEns(ctx, data, kty, publicKey, privateKey interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SignECWithLocalKeyEns", reflect.TypeOf((*MockAuthenticityRepository)(nil).SignECWithLocalKeyEns), ctx, data, kty, publicKey, privateKey)
}

// SignECWithManagedKey mocks base method.
func (m *MockAuthenticityRepository) SignECWithManagedKey(ctx context.Context, data []byte, kid string) (string, *record.Record, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SignECWithManagedKey", ctx, data, kid)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(*record.Record)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// SignECWithManagedKey indicates an expected call of SignECWithManagedKey.
func (mr *MockAuthenticityRepositoryMockRecorder) SignECWithManagedKey(ctx, data, kid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SignECWithManagedKey", reflect.TypeOf((*MockAuthenticityRepository)(nil).SignECWithManagedKey), ctx, data, kid)
}

// SignECWithManagedKeyEns mocks base method.
func (m *MockAuthenticityRepository) SignECWithManagedKeyEns(ctx context.Context, data []byte, kid string) (string, *record.Record, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SignECWithManagedKeyEns", ctx, data, kid)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(*record.Record)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// SignECWithManagedKeyEns indicates an expected call of SignECWithManagedKeyEns.
func (mr *MockAuthenticityRepositoryMockRecorder) SignECWithManagedKeyEns(ctx, data, kid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SignECWithManagedKeyEns", reflect.TypeOf((*MockAuthenticityRepository)(nil).SignECWithManagedKeyEns), ctx, data, kid)
}
