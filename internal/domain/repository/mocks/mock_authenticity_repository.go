// Code generated by MockGen. DO NOT EDIT.
// Source: internal/domain/repository/authenticity_repository.go

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	domain "bloock-managed-api/internal/domain"
	reflect "reflect"

	key "github.com/bloock/bloock-sdk-go/v2/entity/key"
	record "github.com/bloock/bloock-sdk-go/v2/entity/record"
	gomock "github.com/golang/mock/gomock"
)

// MockAuthenticityRepository is a mock of AuthenticityRepository interface.
type MockAuthenticityRepository struct {
	ctrl     *gomock.Controller
	recorder *MockAuthenticityRepositoryMockRecorder
}

// MockAuthenticityRepositoryMockRecorder is the mock recorder for MockAuthenticityRepository.
type MockAuthenticityRepositoryMockRecorder struct {
	mock *MockAuthenticityRepository
}

// NewMockAuthenticityRepository creates a new mock instance.
func NewMockAuthenticityRepository(ctrl *gomock.Controller) *MockAuthenticityRepository {
	mock := &MockAuthenticityRepository{ctrl: ctrl}
	mock.recorder = &MockAuthenticityRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuthenticityRepository) EXPECT() *MockAuthenticityRepositoryMockRecorder {
	return m.recorder
}

// CreateLocalKey mocks base method.
func (m *MockAuthenticityRepository) CreateLocalKey(keyType key.KeyType) (domain.LocalKey, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateLocalKey", keyType)
	ret0, _ := ret[0].(domain.LocalKey)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateLocalKey indicates an expected call of CreateLocalKey.
func (mr *MockAuthenticityRepositoryMockRecorder) CreateLocalKey(keyType interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateLocalKey", reflect.TypeOf((*MockAuthenticityRepository)(nil).CreateLocalKey), keyType)
}

// CreateManagedKey mocks base method.
func (m *MockAuthenticityRepository) CreateManagedKey(name string, keyType key.KeyType, expiration int, level key.KeyProtectionLevel) (key.ManagedKey, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateManagedKey", name, keyType, expiration, level)
	ret0, _ := ret[0].(key.ManagedKey)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateManagedKey indicates an expected call of CreateManagedKey.
func (mr *MockAuthenticityRepositoryMockRecorder) CreateManagedKey(name, keyType, expiration, level interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateManagedKey", reflect.TypeOf((*MockAuthenticityRepository)(nil).CreateManagedKey), name, keyType, expiration, level)
}

// LoadLocalKey mocks base method.
func (m *MockAuthenticityRepository) LoadLocalKey(keyType key.KeyType, publicKey, privateKey string) (key.LocalKey, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoadLocalKey", keyType, publicKey, privateKey)
	ret0, _ := ret[0].(key.LocalKey)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LoadLocalKey indicates an expected call of LoadLocalKey.
func (mr *MockAuthenticityRepositoryMockRecorder) LoadLocalKey(keyType, publicKey, privateKey interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoadLocalKey", reflect.TypeOf((*MockAuthenticityRepository)(nil).LoadLocalKey), keyType, publicKey, privateKey)
}

// Sign mocks base method.
func (m *MockAuthenticityRepository) Sign(localKey key.LocalKey, keyType key.KeyType, commonName *string, data []byte) (record.Record, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Sign", localKey, keyType, commonName, data)
	ret0, _ := ret[0].(record.Record)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Sign indicates an expected call of Sign.
func (mr *MockAuthenticityRepositoryMockRecorder) Sign(localKey, keyType, commonName, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Sign", reflect.TypeOf((*MockAuthenticityRepository)(nil).Sign), localKey, keyType, commonName, data)
}

// Verify mocks base method.
func (m *MockAuthenticityRepository) Verify(record record.Record) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Verify", record)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Verify indicates an expected call of Verify.
func (mr *MockAuthenticityRepositoryMockRecorder) Verify(record interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Verify", reflect.TypeOf((*MockAuthenticityRepository)(nil).Verify), record)
}
