// Code generated by MockGen. DO NOT EDIT.
// Source: internal/domain/repository/authenticity_repository.go

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	context "context"
	reflect "reflect"

	key "github.com/bloock/bloock-sdk-go/v2/entity/key"
	record "github.com/bloock/bloock-sdk-go/v2/entity/record"
	gomock "github.com/golang/mock/gomock"
)

// MockAuthenticityRepository is a mock of AuthenticityRepository interface.
type MockAuthenticityRepository struct {
	ctrl     *gomock.Controller
	recorder *MockAuthenticityRepositoryMockRecorder
}

// MockAuthenticityRepositoryMockRecorder is the mock recorder for MockAuthenticityRepository.
type MockAuthenticityRepositoryMockRecorder struct {
	mock *MockAuthenticityRepository
}

// NewMockAuthenticityRepository creates a new mock instance.
func NewMockAuthenticityRepository(ctrl *gomock.Controller) *MockAuthenticityRepository {
	mock := &MockAuthenticityRepository{ctrl: ctrl}
	mock.recorder = &MockAuthenticityRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuthenticityRepository) EXPECT() *MockAuthenticityRepositoryMockRecorder {
	return m.recorder
}

// SignWithLocalCertificate mocks base method.
func (m *MockAuthenticityRepository) SignWithLocalCertificate(ctx context.Context, data []byte, localCertificate key.LocalCertificate) (string, *record.Record, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SignWithLocalCertificate", ctx, data, localCertificate)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(*record.Record)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// SignWithLocalCertificate indicates an expected call of SignWithLocalCertificate.
func (mr *MockAuthenticityRepositoryMockRecorder) SignWithLocalCertificate(ctx, data, localCertificate interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SignWithLocalCertificate", reflect.TypeOf((*MockAuthenticityRepository)(nil).SignWithLocalCertificate), ctx, data, localCertificate)
}

// SignWithLocalKey mocks base method.
func (m *MockAuthenticityRepository) SignWithLocalKey(ctx context.Context, data []byte, localKey key.LocalKey) (string, *record.Record, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SignWithLocalKey", ctx, data, localKey)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(*record.Record)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// SignWithLocalKey indicates an expected call of SignWithLocalKey.
func (mr *MockAuthenticityRepositoryMockRecorder) SignWithLocalKey(ctx, data, localKey interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SignWithLocalKey", reflect.TypeOf((*MockAuthenticityRepository)(nil).SignWithLocalKey), ctx, data, localKey)
}

// SignWithManagedCertificate mocks base method.
func (m *MockAuthenticityRepository) SignWithManagedCertificate(ctx context.Context, data []byte, managedCertificate key.ManagedCertificate, accessControl *key.AccessControl) (string, *record.Record, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SignWithManagedCertificate", ctx, data, managedCertificate, accessControl)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(*record.Record)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// SignWithManagedCertificate indicates an expected call of SignWithManagedCertificate.
func (mr *MockAuthenticityRepositoryMockRecorder) SignWithManagedCertificate(ctx, data, managedCertificate, accessControl interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SignWithManagedCertificate", reflect.TypeOf((*MockAuthenticityRepository)(nil).SignWithManagedCertificate), ctx, data, managedCertificate, accessControl)
}

// SignWithManagedKey mocks base method.
func (m *MockAuthenticityRepository) SignWithManagedKey(ctx context.Context, data []byte, managedKey key.ManagedKey, accessControl *key.AccessControl) (string, *record.Record, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SignWithManagedKey", ctx, data, managedKey, accessControl)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(*record.Record)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// SignWithManagedKey indicates an expected call of SignWithManagedKey.
func (mr *MockAuthenticityRepositoryMockRecorder) SignWithManagedKey(ctx, data, managedKey, accessControl interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SignWithManagedKey", reflect.TypeOf((*MockAuthenticityRepository)(nil).SignWithManagedKey), ctx, data, managedKey, accessControl)
}
