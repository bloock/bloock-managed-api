// Code generated by MockGen. DO NOT EDIT.
// Source: internal/domain/repository/encryption_repository.go

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	context "context"
	reflect "reflect"

	key "github.com/bloock/bloock-sdk-go/v2/entity/key"
	record "github.com/bloock/bloock-sdk-go/v2/entity/record"
	gomock "github.com/golang/mock/gomock"
)

// MockEncryptionRepository is a mock of EncryptionRepository interface.
type MockEncryptionRepository struct {
	ctrl     *gomock.Controller
	recorder *MockEncryptionRepositoryMockRecorder
}

// MockEncryptionRepositoryMockRecorder is the mock recorder for MockEncryptionRepository.
type MockEncryptionRepositoryMockRecorder struct {
	mock *MockEncryptionRepository
}

// NewMockEncryptionRepository creates a new mock instance.
func NewMockEncryptionRepository(ctrl *gomock.Controller) *MockEncryptionRepository {
	mock := &MockEncryptionRepository{ctrl: ctrl}
	mock.recorder = &MockEncryptionRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEncryptionRepository) EXPECT() *MockEncryptionRepositoryMockRecorder {
	return m.recorder
}

// EncryptWithLocalKey mocks base method.
func (m *MockEncryptionRepository) EncryptWithLocalKey(ctx context.Context, data []byte, localKey key.LocalKey) (*record.Record, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EncryptWithLocalKey", ctx, data, localKey)
	ret0, _ := ret[0].(*record.Record)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EncryptWithLocalKey indicates an expected call of EncryptWithLocalKey.
func (mr *MockEncryptionRepositoryMockRecorder) EncryptWithLocalKey(ctx, data, localKey interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EncryptWithLocalKey", reflect.TypeOf((*MockEncryptionRepository)(nil).EncryptWithLocalKey), ctx, data, localKey)
}

// EncryptWithManagedCertificate mocks base method.
func (m *MockEncryptionRepository) EncryptWithManagedCertificate(ctx context.Context, data []byte, managedCertificate key.ManagedCertificate, accessControl *key.AccessControl) (*record.Record, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EncryptWithManagedCertificate", ctx, data, managedCertificate, accessControl)
	ret0, _ := ret[0].(*record.Record)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EncryptWithManagedCertificate indicates an expected call of EncryptWithManagedCertificate.
func (mr *MockEncryptionRepositoryMockRecorder) EncryptWithManagedCertificate(ctx, data, managedCertificate, accessControl interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EncryptWithManagedCertificate", reflect.TypeOf((*MockEncryptionRepository)(nil).EncryptWithManagedCertificate), ctx, data, managedCertificate, accessControl)
}

// EncryptWithManagedKey mocks base method.
func (m *MockEncryptionRepository) EncryptWithManagedKey(ctx context.Context, data []byte, managedKey key.ManagedKey, accessControl *key.AccessControl) (*record.Record, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EncryptWithManagedKey", ctx, data, managedKey, accessControl)
	ret0, _ := ret[0].(*record.Record)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EncryptWithManagedKey indicates an expected call of EncryptWithManagedKey.
func (mr *MockEncryptionRepositoryMockRecorder) EncryptWithManagedKey(ctx, data, managedKey, accessControl interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EncryptWithManagedKey", reflect.TypeOf((*MockEncryptionRepository)(nil).EncryptWithManagedKey), ctx, data, managedKey, accessControl)
}
