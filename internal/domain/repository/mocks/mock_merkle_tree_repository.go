// Code generated by MockGen. DO NOT EDIT.
// Source: internal/domain/repository/merkle_tree_repository.go

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	context "context"
	reflect "reflect"

	domain "github.com/bloock/bloock-managed-api/internal/domain"
	gomock "github.com/golang/mock/gomock"
)

// MockMerkleTreeRepository is a mock of MerkleTreeRepository interface.
type MockMerkleTreeRepository struct {
	ctrl     *gomock.Controller
	recorder *MockMerkleTreeRepositoryMockRecorder
}

// MockMerkleTreeRepositoryMockRecorder is the mock recorder for MockMerkleTreeRepository.
type MockMerkleTreeRepositoryMockRecorder struct {
	mock *MockMerkleTreeRepository
}

// NewMockMerkleTreeRepository creates a new mock instance.
func NewMockMerkleTreeRepository(ctrl *gomock.Controller) *MockMerkleTreeRepository {
	mock := &MockMerkleTreeRepository{ctrl: ctrl}
	mock.recorder = &MockMerkleTreeRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMerkleTreeRepository) EXPECT() *MockMerkleTreeRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockMerkleTreeRepository) Create(ctx context.Context, messages []domain.Message) (domain.MerkleTree, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, messages)
	ret0, _ := ret[0].(domain.MerkleTree)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockMerkleTreeRepositoryMockRecorder) Create(ctx, messages interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockMerkleTreeRepository)(nil).Create), ctx, messages)
}
