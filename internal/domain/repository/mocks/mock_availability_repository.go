// Code generated by MockGen. DO NOT EDIT.
// Source: internal/domain/repository/availability_repository.go

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockAvailabilityRepository is a mock of AvailabilityRepository interface.
type MockAvailabilityRepository struct {
	ctrl     *gomock.Controller
	recorder *MockAvailabilityRepositoryMockRecorder
}

// MockAvailabilityRepositoryMockRecorder is the mock recorder for MockAvailabilityRepository.
type MockAvailabilityRepositoryMockRecorder struct {
	mock *MockAvailabilityRepository
}

// NewMockAvailabilityRepository creates a new mock instance.
func NewMockAvailabilityRepository(ctrl *gomock.Controller) *MockAvailabilityRepository {
	mock := &MockAvailabilityRepository{ctrl: ctrl}
	mock.recorder = &MockAvailabilityRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAvailabilityRepository) EXPECT() *MockAvailabilityRepositoryMockRecorder {
	return m.recorder
}

// FindFile mocks base method.
func (m *MockAvailabilityRepository) FindFile(ctx context.Context, dataID string) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindFile", ctx, dataID)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindFile indicates an expected call of FindFile.
func (mr *MockAvailabilityRepositoryMockRecorder) FindFile(ctx, dataID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindFile", reflect.TypeOf((*MockAvailabilityRepository)(nil).FindFile), ctx, dataID)
}

// UploadHosted mocks base method.
func (m *MockAvailabilityRepository) UploadHosted(ctx context.Context, data []byte) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UploadHosted", ctx, data)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UploadHosted indicates an expected call of UploadHosted.
func (mr *MockAvailabilityRepositoryMockRecorder) UploadHosted(ctx, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UploadHosted", reflect.TypeOf((*MockAvailabilityRepository)(nil).UploadHosted), ctx, data)
}

// UploadIpfs mocks base method.
func (m *MockAvailabilityRepository) UploadIpfs(ctx context.Context, data []byte) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UploadIpfs", ctx, data)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UploadIpfs indicates an expected call of UploadIpfs.
func (mr *MockAvailabilityRepositoryMockRecorder) UploadIpfs(ctx, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UploadIpfs", reflect.TypeOf((*MockAvailabilityRepository)(nil).UploadIpfs), ctx, data)
}
