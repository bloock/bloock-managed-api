// Code generated by MockGen. DO NOT EDIT.
// Source: internal/domain/repository/process_repository.go

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	context "context"
	reflect "reflect"

	domain "github.com/bloock/bloock-managed-api/internal/domain"
	utils "github.com/bloock/bloock-managed-api/internal/platform/utils"
	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
)

// MockProcessRepository is a mock of ProcessRepository interface.
type MockProcessRepository struct {
	ctrl     *gomock.Controller
	recorder *MockProcessRepositoryMockRecorder
}

// MockProcessRepositoryMockRecorder is the mock recorder for MockProcessRepository.
type MockProcessRepositoryMockRecorder struct {
	mock *MockProcessRepository
}

// NewMockProcessRepository creates a new mock instance.
func NewMockProcessRepository(ctrl *gomock.Controller) *MockProcessRepository {
	mock := &MockProcessRepository{ctrl: ctrl}
	mock.recorder = &MockProcessRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProcessRepository) EXPECT() *MockProcessRepositoryMockRecorder {
	return m.recorder
}

// FindProcessByID mocks base method.
func (m *MockProcessRepository) FindProcessByID(ctx context.Context, id uuid.UUID) (domain.Process, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindProcessByID", ctx, id)
	ret0, _ := ret[0].(domain.Process)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindProcessByID indicates an expected call of FindProcessByID.
func (mr *MockProcessRepositoryMockRecorder) FindProcessByID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindProcessByID", reflect.TypeOf((*MockProcessRepository)(nil).FindProcessByID), ctx, id)
}

// List mocks base method.
func (m *MockProcessRepository) List(ctx context.Context, pq utils.PaginationQuery) ([]domain.Process, utils.Pagination, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", ctx, pq)
	ret0, _ := ret[0].([]domain.Process)
	ret1, _ := ret[1].(utils.Pagination)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// List indicates an expected call of List.
func (mr *MockProcessRepositoryMockRecorder) List(ctx, pq interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockProcessRepository)(nil).List), ctx, pq)
}

// SaveProcess mocks base method.
func (m *MockProcessRepository) SaveProcess(ctx context.Context, process domain.Process, isAggregated bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveProcess", ctx, process, isAggregated)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveProcess indicates an expected call of SaveProcess.
func (mr *MockProcessRepositoryMockRecorder) SaveProcess(ctx, process, isAggregated interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveProcess", reflect.TypeOf((*MockProcessRepository)(nil).SaveProcess), ctx, process, isAggregated)
}

// UpdateAggregatedAnchorID mocks base method.
func (m *MockProcessRepository) UpdateAggregatedAnchorID(ctx context.Context, anchorID int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAggregatedAnchorID", ctx, anchorID)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateAggregatedAnchorID indicates an expected call of UpdateAggregatedAnchorID.
func (mr *MockProcessRepositoryMockRecorder) UpdateAggregatedAnchorID(ctx, anchorID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAggregatedAnchorID", reflect.TypeOf((*MockProcessRepository)(nil).UpdateAggregatedAnchorID), ctx, anchorID)
}

// UpdateStatusByAnchorID mocks base method.
func (m *MockProcessRepository) UpdateStatusByAnchorID(ctx context.Context, anchorID int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateStatusByAnchorID", ctx, anchorID)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateStatusByAnchorID indicates an expected call of UpdateStatusByAnchorID.
func (mr *MockProcessRepositoryMockRecorder) UpdateStatusByAnchorID(ctx, anchorID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateStatusByAnchorID", reflect.TypeOf((*MockProcessRepository)(nil).UpdateStatusByAnchorID), ctx, anchorID)
}
