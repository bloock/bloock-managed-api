// Code generated by MockGen. DO NOT EDIT.
// Source: internal/domain/repository/notification_repository.go

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockNotificationRepository is a mock of NotificationRepository interface.
type MockNotificationRepository struct {
	ctrl     *gomock.Controller
	recorder *MockNotificationRepositoryMockRecorder
}

// MockNotificationRepositoryMockRecorder is the mock recorder for MockNotificationRepository.
type MockNotificationRepositoryMockRecorder struct {
	mock *MockNotificationRepository
}

// NewMockNotificationRepository creates a new mock instance.
func NewMockNotificationRepository(ctrl *gomock.Controller) *MockNotificationRepository {
	mock := &MockNotificationRepository{ctrl: ctrl}
	mock.recorder = &MockNotificationRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockNotificationRepository) EXPECT() *MockNotificationRepositoryMockRecorder {
	return m.recorder
}

// NotifyCertification mocks base method.
func (m *MockNotificationRepository) NotifyCertification(hash string, whResponse interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NotifyCertification", hash, whResponse)
	ret0, _ := ret[0].(error)
	return ret0
}

// NotifyCertification indicates an expected call of NotifyCertification.
func (mr *MockNotificationRepositoryMockRecorder) NotifyCertification(hash, whResponse interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NotifyCertification", reflect.TypeOf((*MockNotificationRepository)(nil).NotifyCertification), hash, whResponse)
}
