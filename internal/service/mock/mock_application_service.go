// Code generated by MockGen. DO NOT EDIT.
// Source: internal/service/application_service.go

// Package mock_service is a generated GoMock package.
package mock_service

import (
	request "bloock-managed-api/internal/service/process/request"
	response "bloock-managed-api/internal/service/process/response"
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockProcessService is a mock of ProcessService interface.
type MockProcessService struct {
	ctrl     *gomock.Controller
	recorder *MockProcessServiceMockRecorder
}

// MockProcessServiceMockRecorder is the mock recorder for MockProcessService.
type MockProcessServiceMockRecorder struct {
	mock *MockProcessService
}

// NewMockProcessService creates a new mock instance.
func NewMockProcessService(ctrl *gomock.Controller) *MockProcessService {
	mock := &MockProcessService{ctrl: ctrl}
	mock.recorder = &MockProcessServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProcessService) EXPECT() *MockProcessServiceMockRecorder {
	return m.recorder
}

// Process mocks base method.
func (m *MockProcessService) Process(ctx context.Context, req request.ProcessRequest) (*response.ProcessResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Process", ctx, req)
	ret0, _ := ret[0].(*response.ProcessResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Process indicates an expected call of Process.
func (mr *MockProcessServiceMockRecorder) Process(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Process", reflect.TypeOf((*MockProcessService)(nil).Process), ctx, req)
}

// MockNotifyService is a mock of NotifyService interface.
type MockNotifyService struct {
	ctrl     *gomock.Controller
	recorder *MockNotifyServiceMockRecorder
}

// MockNotifyServiceMockRecorder is the mock recorder for MockNotifyService.
type MockNotifyServiceMockRecorder struct {
	mock *MockNotifyService
}

// NewMockNotifyService creates a new mock instance.
func NewMockNotifyService(ctrl *gomock.Controller) *MockNotifyService {
	mock := &MockNotifyService{ctrl: ctrl}
	mock.recorder = &MockNotifyServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockNotifyService) EXPECT() *MockNotifyServiceMockRecorder {
	return m.recorder
}

// Notify mocks base method.
func (m *MockNotifyService) Notify(ctx context.Context, anchorID int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Notify", ctx, anchorID)
	ret0, _ := ret[0].(error)
	return ret0
}

// Notify indicates an expected call of Notify.
func (mr *MockNotifyServiceMockRecorder) Notify(ctx, anchorID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Notify", reflect.TypeOf((*MockNotifyService)(nil).Notify), ctx, anchorID)
}
