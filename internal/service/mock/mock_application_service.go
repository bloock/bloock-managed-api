// Code generated by MockGen. DO NOT EDIT.
// Source: internal/service/application_service.go

// Package mock_service is a generated GoMock package.
package mock_service

import (
	domain "bloock-managed-api/internal/domain"
	request "bloock-managed-api/internal/service/create/request"
	response "bloock-managed-api/internal/service/create/response"
	request0 "bloock-managed-api/internal/service/update/request"
	context "context"
	reflect "reflect"

	key "github.com/bloock/bloock-sdk-go/v2/entity/key"
	gomock "github.com/golang/mock/gomock"
)

// MockSignService is a mock of SignService interface.
type MockSignService struct {
	ctrl     *gomock.Controller
	recorder *MockSignServiceMockRecorder
}

// MockSignServiceMockRecorder is the mock recorder for MockSignService.
type MockSignServiceMockRecorder struct {
	mock *MockSignService
}

// NewMockSignService creates a new mock instance.
func NewMockSignService(ctrl *gomock.Controller) *MockSignService {
	mock := &MockSignService{ctrl: ctrl}
	mock.recorder = &MockSignServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSignService) EXPECT() *MockSignServiceMockRecorder {
	return m.recorder
}

// Sign mocks base method.
func (m *MockSignService) Sign(ctx context.Context, req request.SignRequest) (*response.SignResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Sign", req)
	ret0, _ := ret[0].(*response.SignResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Sign indicates an expected call of Sign.
func (mr *MockSignServiceMockRecorder) Sign(req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Sign", reflect.TypeOf((*MockSignService)(nil).Sign), req)
}

// MockCertificateService is a mock of CertificateService interface.
type MockCertificateService struct {
	ctrl     *gomock.Controller
	recorder *MockCertificateServiceMockRecorder
}

// MockCertificateServiceMockRecorder is the mock recorder for MockCertificateService.
type MockCertificateServiceMockRecorder struct {
	mock *MockCertificateService
}

// NewMockCertificateService creates a new mock instance.
func NewMockCertificateService(ctrl *gomock.Controller) *MockCertificateService {
	mock := &MockCertificateService{ctrl: ctrl}
	mock.recorder = &MockCertificateServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCertificateService) EXPECT() *MockCertificateServiceMockRecorder {
	return m.recorder
}

// Certify mocks base method.
func (m *MockCertificateService) Certify(ctx context.Context, files [][]byte) ([]response.CertificationResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Certify", ctx, files)
	ret0, _ := ret[0].([]response.CertificationResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Certify indicates an expected call of Certify.
func (mr *MockCertificateServiceMockRecorder) Certify(ctx, files interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Certify", reflect.TypeOf((*MockCertificateService)(nil).Certify), ctx, files)
}

// MockCertificateUpdateAnchorService is a mock of CertificateUpdateAnchorService interface.
type MockCertificateUpdateAnchorService struct {
	ctrl     *gomock.Controller
	recorder *MockCertificateUpdateAnchorServiceMockRecorder
}

// MockCertificateUpdateAnchorServiceMockRecorder is the mock recorder for MockCertificateUpdateAnchorService.
type MockCertificateUpdateAnchorServiceMockRecorder struct {
	mock *MockCertificateUpdateAnchorService
}

// NewMockCertificateUpdateAnchorService creates a new mock instance.
func NewMockCertificateUpdateAnchorService(ctrl *gomock.Controller) *MockCertificateUpdateAnchorService {
	mock := &MockCertificateUpdateAnchorService{ctrl: ctrl}
	mock.recorder = &MockCertificateUpdateAnchorServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCertificateUpdateAnchorService) EXPECT() *MockCertificateUpdateAnchorServiceMockRecorder {
	return m.recorder
}

// UpdateAnchor mocks base method.
func (m *MockCertificateUpdateAnchorService) UpdateAnchor(ctx context.Context, updateRequest request0.UpdateCertificationAnchorRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAnchor", ctx, updateRequest)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateAnchor indicates an expected call of UpdateAnchor.
func (mr *MockCertificateUpdateAnchorServiceMockRecorder) UpdateAnchor(ctx, updateRequest interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAnchor", reflect.TypeOf((*MockCertificateUpdateAnchorService)(nil).UpdateAnchor), ctx, updateRequest)
}

// MockLocalKeyCreateService is a mock of LocalKeyCreateService interface.
type MockLocalKeyCreateService struct {
	ctrl     *gomock.Controller
	recorder *MockLocalKeyCreateServiceMockRecorder
}

// MockLocalKeyCreateServiceMockRecorder is the mock recorder for MockLocalKeyCreateService.
type MockLocalKeyCreateServiceMockRecorder struct {
	mock *MockLocalKeyCreateService
}

// NewMockLocalKeyCreateService creates a new mock instance.
func NewMockLocalKeyCreateService(ctrl *gomock.Controller) *MockLocalKeyCreateService {
	mock := &MockLocalKeyCreateService{ctrl: ctrl}
	mock.recorder = &MockLocalKeyCreateServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLocalKeyCreateService) EXPECT() *MockLocalKeyCreateServiceMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockLocalKeyCreateService) Create(ctx context.Context, keyType key.KeyType) (domain.LocalKey, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", keyType)
	ret0, _ := ret[0].(domain.LocalKey)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockLocalKeyCreateServiceMockRecorder) Create(keyType interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockLocalKeyCreateService)(nil).Create), keyType)
}

// MockManagedKeyCreateService is a mock of ManagedKeyCreateService interface.
type MockManagedKeyCreateService struct {
	ctrl     *gomock.Controller
	recorder *MockManagedKeyCreateServiceMockRecorder
}

// MockManagedKeyCreateServiceMockRecorder is the mock recorder for MockManagedKeyCreateService.
type MockManagedKeyCreateServiceMockRecorder struct {
	mock *MockManagedKeyCreateService
}

// NewMockManagedKeyCreateService creates a new mock instance.
func NewMockManagedKeyCreateService(ctrl *gomock.Controller) *MockManagedKeyCreateService {
	mock := &MockManagedKeyCreateService{ctrl: ctrl}
	mock.recorder = &MockManagedKeyCreateServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockManagedKeyCreateService) EXPECT() *MockManagedKeyCreateServiceMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockManagedKeyCreateService) Create(request request.CreateManagedKeyRequest) (key.ManagedKey, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", request)
	ret0, _ := ret[0].(key.ManagedKey)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockManagedKeyCreateServiceMockRecorder) Create(request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockManagedKeyCreateService)(nil).Create), request)
}

// MockGetLocalKeysService is a mock of GetLocalKeysService interface.
type MockGetLocalKeysService struct {
	ctrl     *gomock.Controller
	recorder *MockGetLocalKeysServiceMockRecorder
}

// MockGetLocalKeysServiceMockRecorder is the mock recorder for MockGetLocalKeysService.
type MockGetLocalKeysServiceMockRecorder struct {
	mock *MockGetLocalKeysService
}

// NewMockGetLocalKeysService creates a new mock instance.
func NewMockGetLocalKeysService(ctrl *gomock.Controller) *MockGetLocalKeysService {
	mock := &MockGetLocalKeysService{ctrl: ctrl}
	mock.recorder = &MockGetLocalKeysServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGetLocalKeysService) EXPECT() *MockGetLocalKeysServiceMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockGetLocalKeysService) Get(context.Context) ([]domain.LocalKey, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get")
	ret0, _ := ret[0].([]domain.LocalKey)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockGetLocalKeysServiceMockRecorder) Get() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockGetLocalKeysService)(nil).Get))
}
