// Code generated by ent, DO NOT EDIT.

package ent

import (
	"bloock-managed-api/internal/platform/repository/sql/ent/certification"
	"bloock-managed-api/internal/platform/repository/sql/ent/localkey"
	"bloock-managed-api/internal/platform/repository/sql/ent/predicate"
	"context"
	"errors"
	"fmt"
	"sync"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/bloock/bloock-sdk-go/v2/entity/integrity"
	"github.com/bloock/bloock-sdk-go/v2/entity/key"
	"github.com/google/uuid"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeCertification = "Certification"
	TypeLocalKey      = "LocalKey"
)

// CertificationMutation represents an operation that mutates the Certification nodes in the graph.
type CertificationMutation struct {
	config
	op            Op
	typ           string
	id            *uuid.UUID
	anchor_id     *int
	addanchor_id  *int
	anchor        **integrity.Anchor
	hash          *string
	data_id       *string
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*Certification, error)
	predicates    []predicate.Certification
}

var _ ent.Mutation = (*CertificationMutation)(nil)

// certificationOption allows management of the mutation configuration using functional options.
type certificationOption func(*CertificationMutation)

// newCertificationMutation creates new mutation for the Certification entity.
func newCertificationMutation(c config, op Op, opts ...certificationOption) *CertificationMutation {
	m := &CertificationMutation{
		config:        c,
		op:            op,
		typ:           TypeCertification,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withCertificationID sets the ID field of the mutation.
func withCertificationID(id uuid.UUID) certificationOption {
	return func(m *CertificationMutation) {
		var (
			err   error
			once  sync.Once
			value *Certification
		)
		m.oldValue = func(ctx context.Context) (*Certification, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Certification.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withCertification sets the old Certification of the mutation.
func withCertification(node *Certification) certificationOption {
	return func(m *CertificationMutation) {
		m.oldValue = func(context.Context) (*Certification, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m CertificationMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m CertificationMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Certification entities.
func (m *CertificationMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *CertificationMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *CertificationMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Certification.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetAnchorID sets the "anchor_id" field.
func (m *CertificationMutation) SetAnchorID(i int) {
	m.anchor_id = &i
	m.addanchor_id = nil
}

// AnchorID returns the value of the "anchor_id" field in the mutation.
func (m *CertificationMutation) AnchorID() (r int, exists bool) {
	v := m.anchor_id
	if v == nil {
		return
	}
	return *v, true
}

// OldAnchorID returns the old "anchor_id" field's value of the Certification entity.
// If the Certification object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CertificationMutation) OldAnchorID(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAnchorID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAnchorID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAnchorID: %w", err)
	}
	return oldValue.AnchorID, nil
}

// AddAnchorID adds i to the "anchor_id" field.
func (m *CertificationMutation) AddAnchorID(i int) {
	if m.addanchor_id != nil {
		*m.addanchor_id += i
	} else {
		m.addanchor_id = &i
	}
}

// AddedAnchorID returns the value that was added to the "anchor_id" field in this mutation.
func (m *CertificationMutation) AddedAnchorID() (r int, exists bool) {
	v := m.addanchor_id
	if v == nil {
		return
	}
	return *v, true
}

// ResetAnchorID resets all changes to the "anchor_id" field.
func (m *CertificationMutation) ResetAnchorID() {
	m.anchor_id = nil
	m.addanchor_id = nil
}

// SetAnchor sets the "anchor" field.
func (m *CertificationMutation) SetAnchor(i *integrity.Anchor) {
	m.anchor = &i
}

// Anchor returns the value of the "anchor" field in the mutation.
func (m *CertificationMutation) Anchor() (r *integrity.Anchor, exists bool) {
	v := m.anchor
	if v == nil {
		return
	}
	return *v, true
}

// OldAnchor returns the old "anchor" field's value of the Certification entity.
// If the Certification object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CertificationMutation) OldAnchor(ctx context.Context) (v *integrity.Anchor, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAnchor is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAnchor requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAnchor: %w", err)
	}
	return oldValue.Anchor, nil
}

// ResetAnchor resets all changes to the "anchor" field.
func (m *CertificationMutation) ResetAnchor() {
	m.anchor = nil
}

// SetHash sets the "hash" field.
func (m *CertificationMutation) SetHash(s string) {
	m.hash = &s
}

// Hash returns the value of the "hash" field in the mutation.
func (m *CertificationMutation) Hash() (r string, exists bool) {
	v := m.hash
	if v == nil {
		return
	}
	return *v, true
}

// OldHash returns the old "hash" field's value of the Certification entity.
// If the Certification object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CertificationMutation) OldHash(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldHash is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldHash requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldHash: %w", err)
	}
	return oldValue.Hash, nil
}

// ResetHash resets all changes to the "hash" field.
func (m *CertificationMutation) ResetHash() {
	m.hash = nil
}

// SetDataID sets the "data_id" field.
func (m *CertificationMutation) SetDataID(s string) {
	m.data_id = &s
}

// DataID returns the value of the "data_id" field in the mutation.
func (m *CertificationMutation) DataID() (r string, exists bool) {
	v := m.data_id
	if v == nil {
		return
	}
	return *v, true
}

// OldDataID returns the old "data_id" field's value of the Certification entity.
// If the Certification object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CertificationMutation) OldDataID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDataID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDataID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDataID: %w", err)
	}
	return oldValue.DataID, nil
}

// ResetDataID resets all changes to the "data_id" field.
func (m *CertificationMutation) ResetDataID() {
	m.data_id = nil
}

// Where appends a list predicates to the CertificationMutation builder.
func (m *CertificationMutation) Where(ps ...predicate.Certification) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the CertificationMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *CertificationMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Certification, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *CertificationMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *CertificationMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Certification).
func (m *CertificationMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *CertificationMutation) Fields() []string {
	fields := make([]string, 0, 4)
	if m.anchor_id != nil {
		fields = append(fields, certification.FieldAnchorID)
	}
	if m.anchor != nil {
		fields = append(fields, certification.FieldAnchor)
	}
	if m.hash != nil {
		fields = append(fields, certification.FieldHash)
	}
	if m.data_id != nil {
		fields = append(fields, certification.FieldDataID)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *CertificationMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case certification.FieldAnchorID:
		return m.AnchorID()
	case certification.FieldAnchor:
		return m.Anchor()
	case certification.FieldHash:
		return m.Hash()
	case certification.FieldDataID:
		return m.DataID()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *CertificationMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case certification.FieldAnchorID:
		return m.OldAnchorID(ctx)
	case certification.FieldAnchor:
		return m.OldAnchor(ctx)
	case certification.FieldHash:
		return m.OldHash(ctx)
	case certification.FieldDataID:
		return m.OldDataID(ctx)
	}
	return nil, fmt.Errorf("unknown Certification field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *CertificationMutation) SetField(name string, value ent.Value) error {
	switch name {
	case certification.FieldAnchorID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAnchorID(v)
		return nil
	case certification.FieldAnchor:
		v, ok := value.(*integrity.Anchor)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAnchor(v)
		return nil
	case certification.FieldHash:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetHash(v)
		return nil
	case certification.FieldDataID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDataID(v)
		return nil
	}
	return fmt.Errorf("unknown Certification field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *CertificationMutation) AddedFields() []string {
	var fields []string
	if m.addanchor_id != nil {
		fields = append(fields, certification.FieldAnchorID)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *CertificationMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case certification.FieldAnchorID:
		return m.AddedAnchorID()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *CertificationMutation) AddField(name string, value ent.Value) error {
	switch name {
	case certification.FieldAnchorID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddAnchorID(v)
		return nil
	}
	return fmt.Errorf("unknown Certification numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *CertificationMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *CertificationMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *CertificationMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Certification nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *CertificationMutation) ResetField(name string) error {
	switch name {
	case certification.FieldAnchorID:
		m.ResetAnchorID()
		return nil
	case certification.FieldAnchor:
		m.ResetAnchor()
		return nil
	case certification.FieldHash:
		m.ResetHash()
		return nil
	case certification.FieldDataID:
		m.ResetDataID()
		return nil
	}
	return fmt.Errorf("unknown Certification field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *CertificationMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *CertificationMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *CertificationMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *CertificationMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *CertificationMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *CertificationMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *CertificationMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown Certification unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *CertificationMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown Certification edge %s", name)
}

// LocalKeyMutation represents an operation that mutates the LocalKey nodes in the graph.
type LocalKeyMutation struct {
	config
	op            Op
	typ           string
	id            *uuid.UUID
	local_key     **key.LocalKey
	key_type      *string
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*LocalKey, error)
	predicates    []predicate.LocalKey
}

var _ ent.Mutation = (*LocalKeyMutation)(nil)

// localkeyOption allows management of the mutation configuration using functional options.
type localkeyOption func(*LocalKeyMutation)

// newLocalKeyMutation creates new mutation for the LocalKey entity.
func newLocalKeyMutation(c config, op Op, opts ...localkeyOption) *LocalKeyMutation {
	m := &LocalKeyMutation{
		config:        c,
		op:            op,
		typ:           TypeLocalKey,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withLocalKeyID sets the ID field of the mutation.
func withLocalKeyID(id uuid.UUID) localkeyOption {
	return func(m *LocalKeyMutation) {
		var (
			err   error
			once  sync.Once
			value *LocalKey
		)
		m.oldValue = func(ctx context.Context) (*LocalKey, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().LocalKey.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withLocalKey sets the old LocalKey of the mutation.
func withLocalKey(node *LocalKey) localkeyOption {
	return func(m *LocalKeyMutation) {
		m.oldValue = func(context.Context) (*LocalKey, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m LocalKeyMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m LocalKeyMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of LocalKey entities.
func (m *LocalKeyMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *LocalKeyMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *LocalKeyMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().LocalKey.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetLocalKey sets the "local_key" field.
func (m *LocalKeyMutation) SetLocalKey(kk *key.LocalKey) {
	m.local_key = &kk
}

// LocalKey returns the value of the "local_key" field in the mutation.
func (m *LocalKeyMutation) LocalKey() (r *key.LocalKey, exists bool) {
	v := m.local_key
	if v == nil {
		return
	}
	return *v, true
}

// OldLocalKey returns the old "local_key" field's value of the LocalKey entity.
// If the LocalKey object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *LocalKeyMutation) OldLocalKey(ctx context.Context) (v *key.LocalKey, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldLocalKey is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldLocalKey requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLocalKey: %w", err)
	}
	return oldValue.LocalKey, nil
}

// ResetLocalKey resets all changes to the "local_key" field.
func (m *LocalKeyMutation) ResetLocalKey() {
	m.local_key = nil
}

// SetKeyType sets the "key_type" field.
func (m *LocalKeyMutation) SetKeyType(s string) {
	m.key_type = &s
}

// KeyType returns the value of the "key_type" field in the mutation.
func (m *LocalKeyMutation) KeyType() (r string, exists bool) {
	v := m.key_type
	if v == nil {
		return
	}
	return *v, true
}

// OldKeyType returns the old "key_type" field's value of the LocalKey entity.
// If the LocalKey object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *LocalKeyMutation) OldKeyType(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldKeyType is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldKeyType requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldKeyType: %w", err)
	}
	return oldValue.KeyType, nil
}

// ResetKeyType resets all changes to the "key_type" field.
func (m *LocalKeyMutation) ResetKeyType() {
	m.key_type = nil
}

// Where appends a list predicates to the LocalKeyMutation builder.
func (m *LocalKeyMutation) Where(ps ...predicate.LocalKey) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the LocalKeyMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *LocalKeyMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.LocalKey, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *LocalKeyMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *LocalKeyMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (LocalKey).
func (m *LocalKeyMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *LocalKeyMutation) Fields() []string {
	fields := make([]string, 0, 2)
	if m.local_key != nil {
		fields = append(fields, localkey.FieldLocalKey)
	}
	if m.key_type != nil {
		fields = append(fields, localkey.FieldKeyType)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *LocalKeyMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case localkey.FieldLocalKey:
		return m.LocalKey()
	case localkey.FieldKeyType:
		return m.KeyType()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *LocalKeyMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case localkey.FieldLocalKey:
		return m.OldLocalKey(ctx)
	case localkey.FieldKeyType:
		return m.OldKeyType(ctx)
	}
	return nil, fmt.Errorf("unknown LocalKey field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *LocalKeyMutation) SetField(name string, value ent.Value) error {
	switch name {
	case localkey.FieldLocalKey:
		v, ok := value.(*key.LocalKey)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLocalKey(v)
		return nil
	case localkey.FieldKeyType:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetKeyType(v)
		return nil
	}
	return fmt.Errorf("unknown LocalKey field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *LocalKeyMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *LocalKeyMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *LocalKeyMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown LocalKey numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *LocalKeyMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *LocalKeyMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *LocalKeyMutation) ClearField(name string) error {
	return fmt.Errorf("unknown LocalKey nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *LocalKeyMutation) ResetField(name string) error {
	switch name {
	case localkey.FieldLocalKey:
		m.ResetLocalKey()
		return nil
	case localkey.FieldKeyType:
		m.ResetKeyType()
		return nil
	}
	return fmt.Errorf("unknown LocalKey field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *LocalKeyMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *LocalKeyMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *LocalKeyMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *LocalKeyMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *LocalKeyMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *LocalKeyMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *LocalKeyMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown LocalKey unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *LocalKeyMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown LocalKey edge %s", name)
}
