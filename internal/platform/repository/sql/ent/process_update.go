// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"encoding/json"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
	"github.com/bloock/bloock-managed-api/internal/platform/repository/sql/ent/predicate"
	"github.com/bloock/bloock-managed-api/internal/platform/repository/sql/ent/process"
)

// ProcessUpdate is the builder for updating Process entities.
type ProcessUpdate struct {
	config
	hooks    []Hook
	mutation *ProcessMutation
}

// Where appends a list predicates to the ProcessUpdate builder.
func (pu *ProcessUpdate) Where(ps ...predicate.Process) *ProcessUpdate {
	pu.mutation.Where(ps...)
	return pu
}

// SetFilename sets the "filename" field.
func (pu *ProcessUpdate) SetFilename(s string) *ProcessUpdate {
	pu.mutation.SetFilename(s)
	return pu
}

// SetStatus sets the "status" field.
func (pu *ProcessUpdate) SetStatus(b bool) *ProcessUpdate {
	pu.mutation.SetStatus(b)
	return pu
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (pu *ProcessUpdate) SetNillableStatus(b *bool) *ProcessUpdate {
	if b != nil {
		pu.SetStatus(*b)
	}
	return pu
}

// SetHash sets the "hash" field.
func (pu *ProcessUpdate) SetHash(s string) *ProcessUpdate {
	pu.mutation.SetHash(s)
	return pu
}

// SetProcessResponse sets the "process_response" field.
func (pu *ProcessUpdate) SetProcessResponse(jm json.RawMessage) *ProcessUpdate {
	pu.mutation.SetProcessResponse(jm)
	return pu
}

// AppendProcessResponse appends jm to the "process_response" field.
func (pu *ProcessUpdate) AppendProcessResponse(jm json.RawMessage) *ProcessUpdate {
	pu.mutation.AppendProcessResponse(jm)
	return pu
}

// ClearProcessResponse clears the value of the "process_response" field.
func (pu *ProcessUpdate) ClearProcessResponse() *ProcessUpdate {
	pu.mutation.ClearProcessResponse()
	return pu
}

// SetAnchorID sets the "anchor_id" field.
func (pu *ProcessUpdate) SetAnchorID(i int) *ProcessUpdate {
	pu.mutation.ResetAnchorID()
	pu.mutation.SetAnchorID(i)
	return pu
}

// SetNillableAnchorID sets the "anchor_id" field if the given value is not nil.
func (pu *ProcessUpdate) SetNillableAnchorID(i *int) *ProcessUpdate {
	if i != nil {
		pu.SetAnchorID(*i)
	}
	return pu
}

// AddAnchorID adds i to the "anchor_id" field.
func (pu *ProcessUpdate) AddAnchorID(i int) *ProcessUpdate {
	pu.mutation.AddAnchorID(i)
	return pu
}

// ClearAnchorID clears the value of the "anchor_id" field.
func (pu *ProcessUpdate) ClearAnchorID() *ProcessUpdate {
	pu.mutation.ClearAnchorID()
	return pu
}

// SetIsAggregated sets the "is_aggregated" field.
func (pu *ProcessUpdate) SetIsAggregated(b bool) *ProcessUpdate {
	pu.mutation.SetIsAggregated(b)
	return pu
}

// SetNillableIsAggregated sets the "is_aggregated" field if the given value is not nil.
func (pu *ProcessUpdate) SetNillableIsAggregated(b *bool) *ProcessUpdate {
	if b != nil {
		pu.SetIsAggregated(*b)
	}
	return pu
}

// SetCreatedAt sets the "created_at" field.
func (pu *ProcessUpdate) SetCreatedAt(t time.Time) *ProcessUpdate {
	pu.mutation.SetCreatedAt(t)
	return pu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (pu *ProcessUpdate) SetNillableCreatedAt(t *time.Time) *ProcessUpdate {
	if t != nil {
		pu.SetCreatedAt(*t)
	}
	return pu
}

// Mutation returns the ProcessMutation object of the builder.
func (pu *ProcessUpdate) Mutation() *ProcessMutation {
	return pu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (pu *ProcessUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, pu.sqlSave, pu.mutation, pu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (pu *ProcessUpdate) SaveX(ctx context.Context) int {
	affected, err := pu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (pu *ProcessUpdate) Exec(ctx context.Context) error {
	_, err := pu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pu *ProcessUpdate) ExecX(ctx context.Context) {
	if err := pu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pu *ProcessUpdate) check() error {
	if v, ok := pu.mutation.Filename(); ok {
		if err := process.FilenameValidator(v); err != nil {
			return &ValidationError{Name: "filename", err: fmt.Errorf(`ent: validator failed for field "Process.filename": %w`, err)}
		}
	}
	if v, ok := pu.mutation.Hash(); ok {
		if err := process.HashValidator(v); err != nil {
			return &ValidationError{Name: "hash", err: fmt.Errorf(`ent: validator failed for field "Process.hash": %w`, err)}
		}
	}
	return nil
}

func (pu *ProcessUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := pu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(process.Table, process.Columns, sqlgraph.NewFieldSpec(process.FieldID, field.TypeUUID))
	if ps := pu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pu.mutation.Filename(); ok {
		_spec.SetField(process.FieldFilename, field.TypeString, value)
	}
	if value, ok := pu.mutation.Status(); ok {
		_spec.SetField(process.FieldStatus, field.TypeBool, value)
	}
	if value, ok := pu.mutation.Hash(); ok {
		_spec.SetField(process.FieldHash, field.TypeString, value)
	}
	if value, ok := pu.mutation.ProcessResponse(); ok {
		_spec.SetField(process.FieldProcessResponse, field.TypeJSON, value)
	}
	if value, ok := pu.mutation.AppendedProcessResponse(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, process.FieldProcessResponse, value)
		})
	}
	if pu.mutation.ProcessResponseCleared() {
		_spec.ClearField(process.FieldProcessResponse, field.TypeJSON)
	}
	if value, ok := pu.mutation.AnchorID(); ok {
		_spec.SetField(process.FieldAnchorID, field.TypeInt, value)
	}
	if value, ok := pu.mutation.AddedAnchorID(); ok {
		_spec.AddField(process.FieldAnchorID, field.TypeInt, value)
	}
	if pu.mutation.AnchorIDCleared() {
		_spec.ClearField(process.FieldAnchorID, field.TypeInt)
	}
	if value, ok := pu.mutation.IsAggregated(); ok {
		_spec.SetField(process.FieldIsAggregated, field.TypeBool, value)
	}
	if value, ok := pu.mutation.CreatedAt(); ok {
		_spec.SetField(process.FieldCreatedAt, field.TypeTime, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, pu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{process.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	pu.mutation.done = true
	return n, nil
}

// ProcessUpdateOne is the builder for updating a single Process entity.
type ProcessUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ProcessMutation
}

// SetFilename sets the "filename" field.
func (puo *ProcessUpdateOne) SetFilename(s string) *ProcessUpdateOne {
	puo.mutation.SetFilename(s)
	return puo
}

// SetStatus sets the "status" field.
func (puo *ProcessUpdateOne) SetStatus(b bool) *ProcessUpdateOne {
	puo.mutation.SetStatus(b)
	return puo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (puo *ProcessUpdateOne) SetNillableStatus(b *bool) *ProcessUpdateOne {
	if b != nil {
		puo.SetStatus(*b)
	}
	return puo
}

// SetHash sets the "hash" field.
func (puo *ProcessUpdateOne) SetHash(s string) *ProcessUpdateOne {
	puo.mutation.SetHash(s)
	return puo
}

// SetProcessResponse sets the "process_response" field.
func (puo *ProcessUpdateOne) SetProcessResponse(jm json.RawMessage) *ProcessUpdateOne {
	puo.mutation.SetProcessResponse(jm)
	return puo
}

// AppendProcessResponse appends jm to the "process_response" field.
func (puo *ProcessUpdateOne) AppendProcessResponse(jm json.RawMessage) *ProcessUpdateOne {
	puo.mutation.AppendProcessResponse(jm)
	return puo
}

// ClearProcessResponse clears the value of the "process_response" field.
func (puo *ProcessUpdateOne) ClearProcessResponse() *ProcessUpdateOne {
	puo.mutation.ClearProcessResponse()
	return puo
}

// SetAnchorID sets the "anchor_id" field.
func (puo *ProcessUpdateOne) SetAnchorID(i int) *ProcessUpdateOne {
	puo.mutation.ResetAnchorID()
	puo.mutation.SetAnchorID(i)
	return puo
}

// SetNillableAnchorID sets the "anchor_id" field if the given value is not nil.
func (puo *ProcessUpdateOne) SetNillableAnchorID(i *int) *ProcessUpdateOne {
	if i != nil {
		puo.SetAnchorID(*i)
	}
	return puo
}

// AddAnchorID adds i to the "anchor_id" field.
func (puo *ProcessUpdateOne) AddAnchorID(i int) *ProcessUpdateOne {
	puo.mutation.AddAnchorID(i)
	return puo
}

// ClearAnchorID clears the value of the "anchor_id" field.
func (puo *ProcessUpdateOne) ClearAnchorID() *ProcessUpdateOne {
	puo.mutation.ClearAnchorID()
	return puo
}

// SetIsAggregated sets the "is_aggregated" field.
func (puo *ProcessUpdateOne) SetIsAggregated(b bool) *ProcessUpdateOne {
	puo.mutation.SetIsAggregated(b)
	return puo
}

// SetNillableIsAggregated sets the "is_aggregated" field if the given value is not nil.
func (puo *ProcessUpdateOne) SetNillableIsAggregated(b *bool) *ProcessUpdateOne {
	if b != nil {
		puo.SetIsAggregated(*b)
	}
	return puo
}

// SetCreatedAt sets the "created_at" field.
func (puo *ProcessUpdateOne) SetCreatedAt(t time.Time) *ProcessUpdateOne {
	puo.mutation.SetCreatedAt(t)
	return puo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (puo *ProcessUpdateOne) SetNillableCreatedAt(t *time.Time) *ProcessUpdateOne {
	if t != nil {
		puo.SetCreatedAt(*t)
	}
	return puo
}

// Mutation returns the ProcessMutation object of the builder.
func (puo *ProcessUpdateOne) Mutation() *ProcessMutation {
	return puo.mutation
}

// Where appends a list predicates to the ProcessUpdate builder.
func (puo *ProcessUpdateOne) Where(ps ...predicate.Process) *ProcessUpdateOne {
	puo.mutation.Where(ps...)
	return puo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (puo *ProcessUpdateOne) Select(field string, fields ...string) *ProcessUpdateOne {
	puo.fields = append([]string{field}, fields...)
	return puo
}

// Save executes the query and returns the updated Process entity.
func (puo *ProcessUpdateOne) Save(ctx context.Context) (*Process, error) {
	return withHooks(ctx, puo.sqlSave, puo.mutation, puo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (puo *ProcessUpdateOne) SaveX(ctx context.Context) *Process {
	node, err := puo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (puo *ProcessUpdateOne) Exec(ctx context.Context) error {
	_, err := puo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (puo *ProcessUpdateOne) ExecX(ctx context.Context) {
	if err := puo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (puo *ProcessUpdateOne) check() error {
	if v, ok := puo.mutation.Filename(); ok {
		if err := process.FilenameValidator(v); err != nil {
			return &ValidationError{Name: "filename", err: fmt.Errorf(`ent: validator failed for field "Process.filename": %w`, err)}
		}
	}
	if v, ok := puo.mutation.Hash(); ok {
		if err := process.HashValidator(v); err != nil {
			return &ValidationError{Name: "hash", err: fmt.Errorf(`ent: validator failed for field "Process.hash": %w`, err)}
		}
	}
	return nil
}

func (puo *ProcessUpdateOne) sqlSave(ctx context.Context) (_node *Process, err error) {
	if err := puo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(process.Table, process.Columns, sqlgraph.NewFieldSpec(process.FieldID, field.TypeUUID))
	id, ok := puo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Process.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := puo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, process.FieldID)
		for _, f := range fields {
			if !process.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != process.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := puo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := puo.mutation.Filename(); ok {
		_spec.SetField(process.FieldFilename, field.TypeString, value)
	}
	if value, ok := puo.mutation.Status(); ok {
		_spec.SetField(process.FieldStatus, field.TypeBool, value)
	}
	if value, ok := puo.mutation.Hash(); ok {
		_spec.SetField(process.FieldHash, field.TypeString, value)
	}
	if value, ok := puo.mutation.ProcessResponse(); ok {
		_spec.SetField(process.FieldProcessResponse, field.TypeJSON, value)
	}
	if value, ok := puo.mutation.AppendedProcessResponse(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, process.FieldProcessResponse, value)
		})
	}
	if puo.mutation.ProcessResponseCleared() {
		_spec.ClearField(process.FieldProcessResponse, field.TypeJSON)
	}
	if value, ok := puo.mutation.AnchorID(); ok {
		_spec.SetField(process.FieldAnchorID, field.TypeInt, value)
	}
	if value, ok := puo.mutation.AddedAnchorID(); ok {
		_spec.AddField(process.FieldAnchorID, field.TypeInt, value)
	}
	if puo.mutation.AnchorIDCleared() {
		_spec.ClearField(process.FieldAnchorID, field.TypeInt)
	}
	if value, ok := puo.mutation.IsAggregated(); ok {
		_spec.SetField(process.FieldIsAggregated, field.TypeBool, value)
	}
	if value, ok := puo.mutation.CreatedAt(); ok {
		_spec.SetField(process.FieldCreatedAt, field.TypeTime, value)
	}
	_node = &Process{config: puo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, puo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{process.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	puo.mutation.done = true
	return _node, nil
}
