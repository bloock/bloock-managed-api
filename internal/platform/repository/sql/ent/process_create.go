// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"encoding/json"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/bloock/bloock-managed-api/internal/platform/repository/sql/ent/process"
	"github.com/google/uuid"
)

// ProcessCreate is the builder for creating a Process entity.
type ProcessCreate struct {
	config
	mutation *ProcessMutation
	hooks    []Hook
}

// SetFilename sets the "filename" field.
func (pc *ProcessCreate) SetFilename(s string) *ProcessCreate {
	pc.mutation.SetFilename(s)
	return pc
}

// SetStatus sets the "status" field.
func (pc *ProcessCreate) SetStatus(b bool) *ProcessCreate {
	pc.mutation.SetStatus(b)
	return pc
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (pc *ProcessCreate) SetNillableStatus(b *bool) *ProcessCreate {
	if b != nil {
		pc.SetStatus(*b)
	}
	return pc
}

// SetHash sets the "hash" field.
func (pc *ProcessCreate) SetHash(s string) *ProcessCreate {
	pc.mutation.SetHash(s)
	return pc
}

// SetProcessResponse sets the "process_response" field.
func (pc *ProcessCreate) SetProcessResponse(jm json.RawMessage) *ProcessCreate {
	pc.mutation.SetProcessResponse(jm)
	return pc
}

// SetAnchorID sets the "anchor_id" field.
func (pc *ProcessCreate) SetAnchorID(i int) *ProcessCreate {
	pc.mutation.SetAnchorID(i)
	return pc
}

// SetNillableAnchorID sets the "anchor_id" field if the given value is not nil.
func (pc *ProcessCreate) SetNillableAnchorID(i *int) *ProcessCreate {
	if i != nil {
		pc.SetAnchorID(*i)
	}
	return pc
}

// SetIsAggregated sets the "is_aggregated" field.
func (pc *ProcessCreate) SetIsAggregated(b bool) *ProcessCreate {
	pc.mutation.SetIsAggregated(b)
	return pc
}

// SetNillableIsAggregated sets the "is_aggregated" field if the given value is not nil.
func (pc *ProcessCreate) SetNillableIsAggregated(b *bool) *ProcessCreate {
	if b != nil {
		pc.SetIsAggregated(*b)
	}
	return pc
}

// SetCreatedAt sets the "created_at" field.
func (pc *ProcessCreate) SetCreatedAt(t time.Time) *ProcessCreate {
	pc.mutation.SetCreatedAt(t)
	return pc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (pc *ProcessCreate) SetNillableCreatedAt(t *time.Time) *ProcessCreate {
	if t != nil {
		pc.SetCreatedAt(*t)
	}
	return pc
}

// SetID sets the "id" field.
func (pc *ProcessCreate) SetID(u uuid.UUID) *ProcessCreate {
	pc.mutation.SetID(u)
	return pc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (pc *ProcessCreate) SetNillableID(u *uuid.UUID) *ProcessCreate {
	if u != nil {
		pc.SetID(*u)
	}
	return pc
}

// Mutation returns the ProcessMutation object of the builder.
func (pc *ProcessCreate) Mutation() *ProcessMutation {
	return pc.mutation
}

// Save creates the Process in the database.
func (pc *ProcessCreate) Save(ctx context.Context) (*Process, error) {
	pc.defaults()
	return withHooks(ctx, pc.sqlSave, pc.mutation, pc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (pc *ProcessCreate) SaveX(ctx context.Context) *Process {
	v, err := pc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pc *ProcessCreate) Exec(ctx context.Context) error {
	_, err := pc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pc *ProcessCreate) ExecX(ctx context.Context) {
	if err := pc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pc *ProcessCreate) defaults() {
	if _, ok := pc.mutation.Status(); !ok {
		v := process.DefaultStatus
		pc.mutation.SetStatus(v)
	}
	if _, ok := pc.mutation.IsAggregated(); !ok {
		v := process.DefaultIsAggregated
		pc.mutation.SetIsAggregated(v)
	}
	if _, ok := pc.mutation.CreatedAt(); !ok {
		v := process.DefaultCreatedAt
		pc.mutation.SetCreatedAt(v)
	}
	if _, ok := pc.mutation.ID(); !ok {
		v := process.DefaultID()
		pc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pc *ProcessCreate) check() error {
	if _, ok := pc.mutation.Filename(); !ok {
		return &ValidationError{Name: "filename", err: errors.New(`ent: missing required field "Process.filename"`)}
	}
	if v, ok := pc.mutation.Filename(); ok {
		if err := process.FilenameValidator(v); err != nil {
			return &ValidationError{Name: "filename", err: fmt.Errorf(`ent: validator failed for field "Process.filename": %w`, err)}
		}
	}
	if _, ok := pc.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`ent: missing required field "Process.status"`)}
	}
	if _, ok := pc.mutation.Hash(); !ok {
		return &ValidationError{Name: "hash", err: errors.New(`ent: missing required field "Process.hash"`)}
	}
	if v, ok := pc.mutation.Hash(); ok {
		if err := process.HashValidator(v); err != nil {
			return &ValidationError{Name: "hash", err: fmt.Errorf(`ent: validator failed for field "Process.hash": %w`, err)}
		}
	}
	if _, ok := pc.mutation.IsAggregated(); !ok {
		return &ValidationError{Name: "is_aggregated", err: errors.New(`ent: missing required field "Process.is_aggregated"`)}
	}
	if _, ok := pc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Process.created_at"`)}
	}
	return nil
}

func (pc *ProcessCreate) sqlSave(ctx context.Context) (*Process, error) {
	if err := pc.check(); err != nil {
		return nil, err
	}
	_node, _spec := pc.createSpec()
	if err := sqlgraph.CreateNode(ctx, pc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	pc.mutation.id = &_node.ID
	pc.mutation.done = true
	return _node, nil
}

func (pc *ProcessCreate) createSpec() (*Process, *sqlgraph.CreateSpec) {
	var (
		_node = &Process{config: pc.config}
		_spec = sqlgraph.NewCreateSpec(process.Table, sqlgraph.NewFieldSpec(process.FieldID, field.TypeUUID))
	)
	if id, ok := pc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := pc.mutation.Filename(); ok {
		_spec.SetField(process.FieldFilename, field.TypeString, value)
		_node.Filename = value
	}
	if value, ok := pc.mutation.Status(); ok {
		_spec.SetField(process.FieldStatus, field.TypeBool, value)
		_node.Status = value
	}
	if value, ok := pc.mutation.Hash(); ok {
		_spec.SetField(process.FieldHash, field.TypeString, value)
		_node.Hash = value
	}
	if value, ok := pc.mutation.ProcessResponse(); ok {
		_spec.SetField(process.FieldProcessResponse, field.TypeJSON, value)
		_node.ProcessResponse = value
	}
	if value, ok := pc.mutation.AnchorID(); ok {
		_spec.SetField(process.FieldAnchorID, field.TypeInt, value)
		_node.AnchorID = value
	}
	if value, ok := pc.mutation.IsAggregated(); ok {
		_spec.SetField(process.FieldIsAggregated, field.TypeBool, value)
		_node.IsAggregated = value
	}
	if value, ok := pc.mutation.CreatedAt(); ok {
		_spec.SetField(process.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	return _node, _spec
}

// ProcessCreateBulk is the builder for creating many Process entities in bulk.
type ProcessCreateBulk struct {
	config
	err      error
	builders []*ProcessCreate
}

// Save creates the Process entities in the database.
func (pcb *ProcessCreateBulk) Save(ctx context.Context) ([]*Process, error) {
	if pcb.err != nil {
		return nil, pcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(pcb.builders))
	nodes := make([]*Process, len(pcb.builders))
	mutators := make([]Mutator, len(pcb.builders))
	for i := range pcb.builders {
		func(i int, root context.Context) {
			builder := pcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ProcessMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, pcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, pcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, pcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (pcb *ProcessCreateBulk) SaveX(ctx context.Context) []*Process {
	v, err := pcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pcb *ProcessCreateBulk) Exec(ctx context.Context) error {
	_, err := pcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pcb *ProcessCreateBulk) ExecX(ctx context.Context) {
	if err := pcb.Exec(ctx); err != nil {
		panic(err)
	}
}
