// Code generated by ent, DO NOT EDIT.

package process

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/bloock/bloock-managed-api/internal/platform/repository/sql/ent/predicate"
	"github.com/google/uuid"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.Process {
	return predicate.Process(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.Process {
	return predicate.Process(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.Process {
	return predicate.Process(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.Process {
	return predicate.Process(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.Process {
	return predicate.Process(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.Process {
	return predicate.Process(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.Process {
	return predicate.Process(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.Process {
	return predicate.Process(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.Process {
	return predicate.Process(sql.FieldLTE(FieldID, id))
}

// Filename applies equality check predicate on the "filename" field. It's identical to FilenameEQ.
func Filename(v string) predicate.Process {
	return predicate.Process(sql.FieldEQ(FieldFilename, v))
}

// Status applies equality check predicate on the "status" field. It's identical to StatusEQ.
func Status(v bool) predicate.Process {
	return predicate.Process(sql.FieldEQ(FieldStatus, v))
}

// Hash applies equality check predicate on the "hash" field. It's identical to HashEQ.
func Hash(v string) predicate.Process {
	return predicate.Process(sql.FieldEQ(FieldHash, v))
}

// AnchorID applies equality check predicate on the "anchor_id" field. It's identical to AnchorIDEQ.
func AnchorID(v int) predicate.Process {
	return predicate.Process(sql.FieldEQ(FieldAnchorID, v))
}

// IsAggregated applies equality check predicate on the "is_aggregated" field. It's identical to IsAggregatedEQ.
func IsAggregated(v bool) predicate.Process {
	return predicate.Process(sql.FieldEQ(FieldIsAggregated, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Process {
	return predicate.Process(sql.FieldEQ(FieldCreatedAt, v))
}

// FilenameEQ applies the EQ predicate on the "filename" field.
func FilenameEQ(v string) predicate.Process {
	return predicate.Process(sql.FieldEQ(FieldFilename, v))
}

// FilenameNEQ applies the NEQ predicate on the "filename" field.
func FilenameNEQ(v string) predicate.Process {
	return predicate.Process(sql.FieldNEQ(FieldFilename, v))
}

// FilenameIn applies the In predicate on the "filename" field.
func FilenameIn(vs ...string) predicate.Process {
	return predicate.Process(sql.FieldIn(FieldFilename, vs...))
}

// FilenameNotIn applies the NotIn predicate on the "filename" field.
func FilenameNotIn(vs ...string) predicate.Process {
	return predicate.Process(sql.FieldNotIn(FieldFilename, vs...))
}

// FilenameGT applies the GT predicate on the "filename" field.
func FilenameGT(v string) predicate.Process {
	return predicate.Process(sql.FieldGT(FieldFilename, v))
}

// FilenameGTE applies the GTE predicate on the "filename" field.
func FilenameGTE(v string) predicate.Process {
	return predicate.Process(sql.FieldGTE(FieldFilename, v))
}

// FilenameLT applies the LT predicate on the "filename" field.
func FilenameLT(v string) predicate.Process {
	return predicate.Process(sql.FieldLT(FieldFilename, v))
}

// FilenameLTE applies the LTE predicate on the "filename" field.
func FilenameLTE(v string) predicate.Process {
	return predicate.Process(sql.FieldLTE(FieldFilename, v))
}

// FilenameContains applies the Contains predicate on the "filename" field.
func FilenameContains(v string) predicate.Process {
	return predicate.Process(sql.FieldContains(FieldFilename, v))
}

// FilenameHasPrefix applies the HasPrefix predicate on the "filename" field.
func FilenameHasPrefix(v string) predicate.Process {
	return predicate.Process(sql.FieldHasPrefix(FieldFilename, v))
}

// FilenameHasSuffix applies the HasSuffix predicate on the "filename" field.
func FilenameHasSuffix(v string) predicate.Process {
	return predicate.Process(sql.FieldHasSuffix(FieldFilename, v))
}

// FilenameEqualFold applies the EqualFold predicate on the "filename" field.
func FilenameEqualFold(v string) predicate.Process {
	return predicate.Process(sql.FieldEqualFold(FieldFilename, v))
}

// FilenameContainsFold applies the ContainsFold predicate on the "filename" field.
func FilenameContainsFold(v string) predicate.Process {
	return predicate.Process(sql.FieldContainsFold(FieldFilename, v))
}

// StatusEQ applies the EQ predicate on the "status" field.
func StatusEQ(v bool) predicate.Process {
	return predicate.Process(sql.FieldEQ(FieldStatus, v))
}

// StatusNEQ applies the NEQ predicate on the "status" field.
func StatusNEQ(v bool) predicate.Process {
	return predicate.Process(sql.FieldNEQ(FieldStatus, v))
}

// HashEQ applies the EQ predicate on the "hash" field.
func HashEQ(v string) predicate.Process {
	return predicate.Process(sql.FieldEQ(FieldHash, v))
}

// HashNEQ applies the NEQ predicate on the "hash" field.
func HashNEQ(v string) predicate.Process {
	return predicate.Process(sql.FieldNEQ(FieldHash, v))
}

// HashIn applies the In predicate on the "hash" field.
func HashIn(vs ...string) predicate.Process {
	return predicate.Process(sql.FieldIn(FieldHash, vs...))
}

// HashNotIn applies the NotIn predicate on the "hash" field.
func HashNotIn(vs ...string) predicate.Process {
	return predicate.Process(sql.FieldNotIn(FieldHash, vs...))
}

// HashGT applies the GT predicate on the "hash" field.
func HashGT(v string) predicate.Process {
	return predicate.Process(sql.FieldGT(FieldHash, v))
}

// HashGTE applies the GTE predicate on the "hash" field.
func HashGTE(v string) predicate.Process {
	return predicate.Process(sql.FieldGTE(FieldHash, v))
}

// HashLT applies the LT predicate on the "hash" field.
func HashLT(v string) predicate.Process {
	return predicate.Process(sql.FieldLT(FieldHash, v))
}

// HashLTE applies the LTE predicate on the "hash" field.
func HashLTE(v string) predicate.Process {
	return predicate.Process(sql.FieldLTE(FieldHash, v))
}

// HashContains applies the Contains predicate on the "hash" field.
func HashContains(v string) predicate.Process {
	return predicate.Process(sql.FieldContains(FieldHash, v))
}

// HashHasPrefix applies the HasPrefix predicate on the "hash" field.
func HashHasPrefix(v string) predicate.Process {
	return predicate.Process(sql.FieldHasPrefix(FieldHash, v))
}

// HashHasSuffix applies the HasSuffix predicate on the "hash" field.
func HashHasSuffix(v string) predicate.Process {
	return predicate.Process(sql.FieldHasSuffix(FieldHash, v))
}

// HashEqualFold applies the EqualFold predicate on the "hash" field.
func HashEqualFold(v string) predicate.Process {
	return predicate.Process(sql.FieldEqualFold(FieldHash, v))
}

// HashContainsFold applies the ContainsFold predicate on the "hash" field.
func HashContainsFold(v string) predicate.Process {
	return predicate.Process(sql.FieldContainsFold(FieldHash, v))
}

// ProcessResponseIsNil applies the IsNil predicate on the "process_response" field.
func ProcessResponseIsNil() predicate.Process {
	return predicate.Process(sql.FieldIsNull(FieldProcessResponse))
}

// ProcessResponseNotNil applies the NotNil predicate on the "process_response" field.
func ProcessResponseNotNil() predicate.Process {
	return predicate.Process(sql.FieldNotNull(FieldProcessResponse))
}

// AnchorIDEQ applies the EQ predicate on the "anchor_id" field.
func AnchorIDEQ(v int) predicate.Process {
	return predicate.Process(sql.FieldEQ(FieldAnchorID, v))
}

// AnchorIDNEQ applies the NEQ predicate on the "anchor_id" field.
func AnchorIDNEQ(v int) predicate.Process {
	return predicate.Process(sql.FieldNEQ(FieldAnchorID, v))
}

// AnchorIDIn applies the In predicate on the "anchor_id" field.
func AnchorIDIn(vs ...int) predicate.Process {
	return predicate.Process(sql.FieldIn(FieldAnchorID, vs...))
}

// AnchorIDNotIn applies the NotIn predicate on the "anchor_id" field.
func AnchorIDNotIn(vs ...int) predicate.Process {
	return predicate.Process(sql.FieldNotIn(FieldAnchorID, vs...))
}

// AnchorIDGT applies the GT predicate on the "anchor_id" field.
func AnchorIDGT(v int) predicate.Process {
	return predicate.Process(sql.FieldGT(FieldAnchorID, v))
}

// AnchorIDGTE applies the GTE predicate on the "anchor_id" field.
func AnchorIDGTE(v int) predicate.Process {
	return predicate.Process(sql.FieldGTE(FieldAnchorID, v))
}

// AnchorIDLT applies the LT predicate on the "anchor_id" field.
func AnchorIDLT(v int) predicate.Process {
	return predicate.Process(sql.FieldLT(FieldAnchorID, v))
}

// AnchorIDLTE applies the LTE predicate on the "anchor_id" field.
func AnchorIDLTE(v int) predicate.Process {
	return predicate.Process(sql.FieldLTE(FieldAnchorID, v))
}

// AnchorIDIsNil applies the IsNil predicate on the "anchor_id" field.
func AnchorIDIsNil() predicate.Process {
	return predicate.Process(sql.FieldIsNull(FieldAnchorID))
}

// AnchorIDNotNil applies the NotNil predicate on the "anchor_id" field.
func AnchorIDNotNil() predicate.Process {
	return predicate.Process(sql.FieldNotNull(FieldAnchorID))
}

// IsAggregatedEQ applies the EQ predicate on the "is_aggregated" field.
func IsAggregatedEQ(v bool) predicate.Process {
	return predicate.Process(sql.FieldEQ(FieldIsAggregated, v))
}

// IsAggregatedNEQ applies the NEQ predicate on the "is_aggregated" field.
func IsAggregatedNEQ(v bool) predicate.Process {
	return predicate.Process(sql.FieldNEQ(FieldIsAggregated, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Process {
	return predicate.Process(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Process {
	return predicate.Process(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Process {
	return predicate.Process(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Process {
	return predicate.Process(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Process {
	return predicate.Process(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Process {
	return predicate.Process(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Process {
	return predicate.Process(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Process {
	return predicate.Process(sql.FieldLTE(FieldCreatedAt, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Process) predicate.Process {
	return predicate.Process(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Process) predicate.Process {
	return predicate.Process(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Process) predicate.Process {
	return predicate.Process(sql.NotPredicates(p))
}
