// Code generated by ent, DO NOT EDIT.

package message

import (
	"entgo.io/ent/dialect/sql"
	"github.com/bloock/bloock-managed-api/internal/platform/repository/sql/ent/predicate"
	"github.com/google/uuid"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.Message {
	return predicate.Message(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.Message {
	return predicate.Message(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.Message {
	return predicate.Message(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.Message {
	return predicate.Message(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.Message {
	return predicate.Message(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.Message {
	return predicate.Message(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.Message {
	return predicate.Message(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.Message {
	return predicate.Message(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.Message {
	return predicate.Message(sql.FieldLTE(FieldID, id))
}

// Message applies equality check predicate on the "message" field. It's identical to MessageEQ.
func Message(v string) predicate.Message {
	return predicate.Message(sql.FieldEQ(FieldMessage, v))
}

// Root applies equality check predicate on the "root" field. It's identical to RootEQ.
func Root(v string) predicate.Message {
	return predicate.Message(sql.FieldEQ(FieldRoot, v))
}

// AnchorID applies equality check predicate on the "anchor_id" field. It's identical to AnchorIDEQ.
func AnchorID(v int) predicate.Message {
	return predicate.Message(sql.FieldEQ(FieldAnchorID, v))
}

// MessageEQ applies the EQ predicate on the "message" field.
func MessageEQ(v string) predicate.Message {
	return predicate.Message(sql.FieldEQ(FieldMessage, v))
}

// MessageNEQ applies the NEQ predicate on the "message" field.
func MessageNEQ(v string) predicate.Message {
	return predicate.Message(sql.FieldNEQ(FieldMessage, v))
}

// MessageIn applies the In predicate on the "message" field.
func MessageIn(vs ...string) predicate.Message {
	return predicate.Message(sql.FieldIn(FieldMessage, vs...))
}

// MessageNotIn applies the NotIn predicate on the "message" field.
func MessageNotIn(vs ...string) predicate.Message {
	return predicate.Message(sql.FieldNotIn(FieldMessage, vs...))
}

// MessageGT applies the GT predicate on the "message" field.
func MessageGT(v string) predicate.Message {
	return predicate.Message(sql.FieldGT(FieldMessage, v))
}

// MessageGTE applies the GTE predicate on the "message" field.
func MessageGTE(v string) predicate.Message {
	return predicate.Message(sql.FieldGTE(FieldMessage, v))
}

// MessageLT applies the LT predicate on the "message" field.
func MessageLT(v string) predicate.Message {
	return predicate.Message(sql.FieldLT(FieldMessage, v))
}

// MessageLTE applies the LTE predicate on the "message" field.
func MessageLTE(v string) predicate.Message {
	return predicate.Message(sql.FieldLTE(FieldMessage, v))
}

// MessageContains applies the Contains predicate on the "message" field.
func MessageContains(v string) predicate.Message {
	return predicate.Message(sql.FieldContains(FieldMessage, v))
}

// MessageHasPrefix applies the HasPrefix predicate on the "message" field.
func MessageHasPrefix(v string) predicate.Message {
	return predicate.Message(sql.FieldHasPrefix(FieldMessage, v))
}

// MessageHasSuffix applies the HasSuffix predicate on the "message" field.
func MessageHasSuffix(v string) predicate.Message {
	return predicate.Message(sql.FieldHasSuffix(FieldMessage, v))
}

// MessageEqualFold applies the EqualFold predicate on the "message" field.
func MessageEqualFold(v string) predicate.Message {
	return predicate.Message(sql.FieldEqualFold(FieldMessage, v))
}

// MessageContainsFold applies the ContainsFold predicate on the "message" field.
func MessageContainsFold(v string) predicate.Message {
	return predicate.Message(sql.FieldContainsFold(FieldMessage, v))
}

// RootEQ applies the EQ predicate on the "root" field.
func RootEQ(v string) predicate.Message {
	return predicate.Message(sql.FieldEQ(FieldRoot, v))
}

// RootNEQ applies the NEQ predicate on the "root" field.
func RootNEQ(v string) predicate.Message {
	return predicate.Message(sql.FieldNEQ(FieldRoot, v))
}

// RootIn applies the In predicate on the "root" field.
func RootIn(vs ...string) predicate.Message {
	return predicate.Message(sql.FieldIn(FieldRoot, vs...))
}

// RootNotIn applies the NotIn predicate on the "root" field.
func RootNotIn(vs ...string) predicate.Message {
	return predicate.Message(sql.FieldNotIn(FieldRoot, vs...))
}

// RootGT applies the GT predicate on the "root" field.
func RootGT(v string) predicate.Message {
	return predicate.Message(sql.FieldGT(FieldRoot, v))
}

// RootGTE applies the GTE predicate on the "root" field.
func RootGTE(v string) predicate.Message {
	return predicate.Message(sql.FieldGTE(FieldRoot, v))
}

// RootLT applies the LT predicate on the "root" field.
func RootLT(v string) predicate.Message {
	return predicate.Message(sql.FieldLT(FieldRoot, v))
}

// RootLTE applies the LTE predicate on the "root" field.
func RootLTE(v string) predicate.Message {
	return predicate.Message(sql.FieldLTE(FieldRoot, v))
}

// RootContains applies the Contains predicate on the "root" field.
func RootContains(v string) predicate.Message {
	return predicate.Message(sql.FieldContains(FieldRoot, v))
}

// RootHasPrefix applies the HasPrefix predicate on the "root" field.
func RootHasPrefix(v string) predicate.Message {
	return predicate.Message(sql.FieldHasPrefix(FieldRoot, v))
}

// RootHasSuffix applies the HasSuffix predicate on the "root" field.
func RootHasSuffix(v string) predicate.Message {
	return predicate.Message(sql.FieldHasSuffix(FieldRoot, v))
}

// RootEqualFold applies the EqualFold predicate on the "root" field.
func RootEqualFold(v string) predicate.Message {
	return predicate.Message(sql.FieldEqualFold(FieldRoot, v))
}

// RootContainsFold applies the ContainsFold predicate on the "root" field.
func RootContainsFold(v string) predicate.Message {
	return predicate.Message(sql.FieldContainsFold(FieldRoot, v))
}

// AnchorIDEQ applies the EQ predicate on the "anchor_id" field.
func AnchorIDEQ(v int) predicate.Message {
	return predicate.Message(sql.FieldEQ(FieldAnchorID, v))
}

// AnchorIDNEQ applies the NEQ predicate on the "anchor_id" field.
func AnchorIDNEQ(v int) predicate.Message {
	return predicate.Message(sql.FieldNEQ(FieldAnchorID, v))
}

// AnchorIDIn applies the In predicate on the "anchor_id" field.
func AnchorIDIn(vs ...int) predicate.Message {
	return predicate.Message(sql.FieldIn(FieldAnchorID, vs...))
}

// AnchorIDNotIn applies the NotIn predicate on the "anchor_id" field.
func AnchorIDNotIn(vs ...int) predicate.Message {
	return predicate.Message(sql.FieldNotIn(FieldAnchorID, vs...))
}

// AnchorIDGT applies the GT predicate on the "anchor_id" field.
func AnchorIDGT(v int) predicate.Message {
	return predicate.Message(sql.FieldGT(FieldAnchorID, v))
}

// AnchorIDGTE applies the GTE predicate on the "anchor_id" field.
func AnchorIDGTE(v int) predicate.Message {
	return predicate.Message(sql.FieldGTE(FieldAnchorID, v))
}

// AnchorIDLT applies the LT predicate on the "anchor_id" field.
func AnchorIDLT(v int) predicate.Message {
	return predicate.Message(sql.FieldLT(FieldAnchorID, v))
}

// AnchorIDLTE applies the LTE predicate on the "anchor_id" field.
func AnchorIDLTE(v int) predicate.Message {
	return predicate.Message(sql.FieldLTE(FieldAnchorID, v))
}

// ProofIsNil applies the IsNil predicate on the "proof" field.
func ProofIsNil() predicate.Message {
	return predicate.Message(sql.FieldIsNull(FieldProof))
}

// ProofNotNil applies the NotNil predicate on the "proof" field.
func ProofNotNil() predicate.Message {
	return predicate.Message(sql.FieldNotNull(FieldProof))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Message) predicate.Message {
	return predicate.Message(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Message) predicate.Message {
	return predicate.Message(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Message) predicate.Message {
	return predicate.Message(sql.NotPredicates(p))
}
