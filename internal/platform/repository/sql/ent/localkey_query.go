// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"math"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/bloock/bloock-managed-api/internal/platform/repository/sql/ent/localkey"
	"github.com/bloock/bloock-managed-api/internal/platform/repository/sql/ent/predicate"
	"github.com/google/uuid"
)

// LocalKeyQuery is the builder for querying LocalKey entities.
type LocalKeyQuery struct {
	config
	ctx        *QueryContext
	order      []localkey.OrderOption
	inters     []Interceptor
	predicates []predicate.LocalKey
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the LocalKeyQuery builder.
func (lkq *LocalKeyQuery) Where(ps ...predicate.LocalKey) *LocalKeyQuery {
	lkq.predicates = append(lkq.predicates, ps...)
	return lkq
}

// Limit the number of records to be returned by this query.
func (lkq *LocalKeyQuery) Limit(limit int) *LocalKeyQuery {
	lkq.ctx.Limit = &limit
	return lkq
}

// Offset to start from.
func (lkq *LocalKeyQuery) Offset(offset int) *LocalKeyQuery {
	lkq.ctx.Offset = &offset
	return lkq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (lkq *LocalKeyQuery) Unique(unique bool) *LocalKeyQuery {
	lkq.ctx.Unique = &unique
	return lkq
}

// Order specifies how the records should be ordered.
func (lkq *LocalKeyQuery) Order(o ...localkey.OrderOption) *LocalKeyQuery {
	lkq.order = append(lkq.order, o...)
	return lkq
}

// First returns the first LocalKey entity from the query.
// Returns a *NotFoundError when no LocalKey was found.
func (lkq *LocalKeyQuery) First(ctx context.Context) (*LocalKey, error) {
	nodes, err := lkq.Limit(1).All(setContextOp(ctx, lkq.ctx, "First"))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{localkey.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (lkq *LocalKeyQuery) FirstX(ctx context.Context) *LocalKey {
	node, err := lkq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first LocalKey ID from the query.
// Returns a *NotFoundError when no LocalKey ID was found.
func (lkq *LocalKeyQuery) FirstID(ctx context.Context) (id uuid.UUID, err error) {
	var ids []uuid.UUID
	if ids, err = lkq.Limit(1).IDs(setContextOp(ctx, lkq.ctx, "FirstID")); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{localkey.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (lkq *LocalKeyQuery) FirstIDX(ctx context.Context) uuid.UUID {
	id, err := lkq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single LocalKey entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one LocalKey entity is found.
// Returns a *NotFoundError when no LocalKey entities are found.
func (lkq *LocalKeyQuery) Only(ctx context.Context) (*LocalKey, error) {
	nodes, err := lkq.Limit(2).All(setContextOp(ctx, lkq.ctx, "Only"))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{localkey.Label}
	default:
		return nil, &NotSingularError{localkey.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (lkq *LocalKeyQuery) OnlyX(ctx context.Context) *LocalKey {
	node, err := lkq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only LocalKey ID in the query.
// Returns a *NotSingularError when more than one LocalKey ID is found.
// Returns a *NotFoundError when no entities are found.
func (lkq *LocalKeyQuery) OnlyID(ctx context.Context) (id uuid.UUID, err error) {
	var ids []uuid.UUID
	if ids, err = lkq.Limit(2).IDs(setContextOp(ctx, lkq.ctx, "OnlyID")); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{localkey.Label}
	default:
		err = &NotSingularError{localkey.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (lkq *LocalKeyQuery) OnlyIDX(ctx context.Context) uuid.UUID {
	id, err := lkq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of LocalKeys.
func (lkq *LocalKeyQuery) All(ctx context.Context) ([]*LocalKey, error) {
	ctx = setContextOp(ctx, lkq.ctx, "All")
	if err := lkq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*LocalKey, *LocalKeyQuery]()
	return withInterceptors[[]*LocalKey](ctx, lkq, qr, lkq.inters)
}

// AllX is like All, but panics if an error occurs.
func (lkq *LocalKeyQuery) AllX(ctx context.Context) []*LocalKey {
	nodes, err := lkq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of LocalKey IDs.
func (lkq *LocalKeyQuery) IDs(ctx context.Context) (ids []uuid.UUID, err error) {
	if lkq.ctx.Unique == nil && lkq.path != nil {
		lkq.Unique(true)
	}
	ctx = setContextOp(ctx, lkq.ctx, "IDs")
	if err = lkq.Select(localkey.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (lkq *LocalKeyQuery) IDsX(ctx context.Context) []uuid.UUID {
	ids, err := lkq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (lkq *LocalKeyQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, lkq.ctx, "Count")
	if err := lkq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, lkq, querierCount[*LocalKeyQuery](), lkq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (lkq *LocalKeyQuery) CountX(ctx context.Context) int {
	count, err := lkq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (lkq *LocalKeyQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, lkq.ctx, "Exist")
	switch _, err := lkq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (lkq *LocalKeyQuery) ExistX(ctx context.Context) bool {
	exist, err := lkq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the LocalKeyQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (lkq *LocalKeyQuery) Clone() *LocalKeyQuery {
	if lkq == nil {
		return nil
	}
	return &LocalKeyQuery{
		config:     lkq.config,
		ctx:        lkq.ctx.Clone(),
		order:      append([]localkey.OrderOption{}, lkq.order...),
		inters:     append([]Interceptor{}, lkq.inters...),
		predicates: append([]predicate.LocalKey{}, lkq.predicates...),
		// clone intermediate query.
		sql:  lkq.sql.Clone(),
		path: lkq.path,
	}
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		LocalKey *key.LocalKey `json:"local_key,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.LocalKey.Query().
//		GroupBy(localkey.FieldLocalKey).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (lkq *LocalKeyQuery) GroupBy(field string, fields ...string) *LocalKeyGroupBy {
	lkq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &LocalKeyGroupBy{build: lkq}
	grbuild.flds = &lkq.ctx.Fields
	grbuild.label = localkey.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		LocalKey *key.LocalKey `json:"local_key,omitempty"`
//	}
//
//	client.LocalKey.Query().
//		Select(localkey.FieldLocalKey).
//		Scan(ctx, &v)
func (lkq *LocalKeyQuery) Select(fields ...string) *LocalKeySelect {
	lkq.ctx.Fields = append(lkq.ctx.Fields, fields...)
	sbuild := &LocalKeySelect{LocalKeyQuery: lkq}
	sbuild.label = localkey.Label
	sbuild.flds, sbuild.scan = &lkq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a LocalKeySelect configured with the given aggregations.
func (lkq *LocalKeyQuery) Aggregate(fns ...AggregateFunc) *LocalKeySelect {
	return lkq.Select().Aggregate(fns...)
}

func (lkq *LocalKeyQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range lkq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, lkq); err != nil {
				return err
			}
		}
	}
	for _, f := range lkq.ctx.Fields {
		if !localkey.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if lkq.path != nil {
		prev, err := lkq.path(ctx)
		if err != nil {
			return err
		}
		lkq.sql = prev
	}
	return nil
}

func (lkq *LocalKeyQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*LocalKey, error) {
	var (
		nodes = []*LocalKey{}
		_spec = lkq.querySpec()
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*LocalKey).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &LocalKey{config: lkq.config}
		nodes = append(nodes, node)
		return node.assignValues(columns, values)
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, lkq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	return nodes, nil
}

func (lkq *LocalKeyQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := lkq.querySpec()
	_spec.Node.Columns = lkq.ctx.Fields
	if len(lkq.ctx.Fields) > 0 {
		_spec.Unique = lkq.ctx.Unique != nil && *lkq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, lkq.driver, _spec)
}

func (lkq *LocalKeyQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(localkey.Table, localkey.Columns, sqlgraph.NewFieldSpec(localkey.FieldID, field.TypeUUID))
	_spec.From = lkq.sql
	if unique := lkq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if lkq.path != nil {
		_spec.Unique = true
	}
	if fields := lkq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, localkey.FieldID)
		for i := range fields {
			if fields[i] != localkey.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := lkq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := lkq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := lkq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := lkq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (lkq *LocalKeyQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(lkq.driver.Dialect())
	t1 := builder.Table(localkey.Table)
	columns := lkq.ctx.Fields
	if len(columns) == 0 {
		columns = localkey.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if lkq.sql != nil {
		selector = lkq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if lkq.ctx.Unique != nil && *lkq.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range lkq.predicates {
		p(selector)
	}
	for _, p := range lkq.order {
		p(selector)
	}
	if offset := lkq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := lkq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// LocalKeyGroupBy is the group-by builder for LocalKey entities.
type LocalKeyGroupBy struct {
	selector
	build *LocalKeyQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (lkgb *LocalKeyGroupBy) Aggregate(fns ...AggregateFunc) *LocalKeyGroupBy {
	lkgb.fns = append(lkgb.fns, fns...)
	return lkgb
}

// Scan applies the selector query and scans the result into the given value.
func (lkgb *LocalKeyGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, lkgb.build.ctx, "GroupBy")
	if err := lkgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*LocalKeyQuery, *LocalKeyGroupBy](ctx, lkgb.build, lkgb, lkgb.build.inters, v)
}

func (lkgb *LocalKeyGroupBy) sqlScan(ctx context.Context, root *LocalKeyQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(lkgb.fns))
	for _, fn := range lkgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*lkgb.flds)+len(lkgb.fns))
		for _, f := range *lkgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*lkgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := lkgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// LocalKeySelect is the builder for selecting fields of LocalKey entities.
type LocalKeySelect struct {
	*LocalKeyQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (lks *LocalKeySelect) Aggregate(fns ...AggregateFunc) *LocalKeySelect {
	lks.fns = append(lks.fns, fns...)
	return lks
}

// Scan applies the selector query and scans the result into the given value.
func (lks *LocalKeySelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, lks.ctx, "Select")
	if err := lks.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*LocalKeyQuery, *LocalKeySelect](ctx, lks.LocalKeyQuery, lks, lks.inters, v)
}

func (lks *LocalKeySelect) sqlScan(ctx context.Context, root *LocalKeyQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(lks.fns))
	for _, fn := range lks.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*lks.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := lks.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
