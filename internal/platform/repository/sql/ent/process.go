// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/bloock/bloock-managed-api/internal/platform/repository/sql/ent/process"
	"github.com/google/uuid"
)

// Process is the model entity for the Process schema.
type Process struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// Filename holds the value of the "filename" field.
	Filename string `json:"filename,omitempty"`
	// Status holds the value of the "status" field.
	Status bool `json:"status,omitempty"`
	// Hash holds the value of the "hash" field.
	Hash string `json:"hash,omitempty"`
	// ProcessResponse holds the value of the "process_response" field.
	ProcessResponse json.RawMessage `json:"process_response,omitempty"`
	// AnchorID holds the value of the "anchor_id" field.
	AnchorID int `json:"anchor_id,omitempty"`
	// IsAggregated holds the value of the "is_aggregated" field.
	IsAggregated bool `json:"is_aggregated,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt    time.Time `json:"created_at,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Process) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case process.FieldProcessResponse:
			values[i] = new([]byte)
		case process.FieldStatus, process.FieldIsAggregated:
			values[i] = new(sql.NullBool)
		case process.FieldAnchorID:
			values[i] = new(sql.NullInt64)
		case process.FieldFilename, process.FieldHash:
			values[i] = new(sql.NullString)
		case process.FieldCreatedAt:
			values[i] = new(sql.NullTime)
		case process.FieldID:
			values[i] = new(uuid.UUID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Process fields.
func (pr *Process) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case process.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				pr.ID = *value
			}
		case process.FieldFilename:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field filename", values[i])
			} else if value.Valid {
				pr.Filename = value.String
			}
		case process.FieldStatus:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				pr.Status = value.Bool
			}
		case process.FieldHash:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field hash", values[i])
			} else if value.Valid {
				pr.Hash = value.String
			}
		case process.FieldProcessResponse:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field process_response", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &pr.ProcessResponse); err != nil {
					return fmt.Errorf("unmarshal field process_response: %w", err)
				}
			}
		case process.FieldAnchorID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field anchor_id", values[i])
			} else if value.Valid {
				pr.AnchorID = int(value.Int64)
			}
		case process.FieldIsAggregated:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field is_aggregated", values[i])
			} else if value.Valid {
				pr.IsAggregated = value.Bool
			}
		case process.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				pr.CreatedAt = value.Time
			}
		default:
			pr.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Process.
// This includes values selected through modifiers, order, etc.
func (pr *Process) Value(name string) (ent.Value, error) {
	return pr.selectValues.Get(name)
}

// Update returns a builder for updating this Process.
// Note that you need to call Process.Unwrap() before calling this method if this Process
// was returned from a transaction, and the transaction was committed or rolled back.
func (pr *Process) Update() *ProcessUpdateOne {
	return NewProcessClient(pr.config).UpdateOne(pr)
}

// Unwrap unwraps the Process entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (pr *Process) Unwrap() *Process {
	_tx, ok := pr.config.driver.(*txDriver)
	if !ok {
		panic("ent: Process is not a transactional entity")
	}
	pr.config.driver = _tx.drv
	return pr
}

// String implements the fmt.Stringer.
func (pr *Process) String() string {
	var builder strings.Builder
	builder.WriteString("Process(")
	builder.WriteString(fmt.Sprintf("id=%v, ", pr.ID))
	builder.WriteString("filename=")
	builder.WriteString(pr.Filename)
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(fmt.Sprintf("%v", pr.Status))
	builder.WriteString(", ")
	builder.WriteString("hash=")
	builder.WriteString(pr.Hash)
	builder.WriteString(", ")
	builder.WriteString("process_response=")
	builder.WriteString(fmt.Sprintf("%v", pr.ProcessResponse))
	builder.WriteString(", ")
	builder.WriteString("anchor_id=")
	builder.WriteString(fmt.Sprintf("%v", pr.AnchorID))
	builder.WriteString(", ")
	builder.WriteString("is_aggregated=")
	builder.WriteString(fmt.Sprintf("%v", pr.IsAggregated))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(pr.CreatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// Processes is a parsable slice of Process.
type Processes []*Process
