// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/bloock/bloock-managed-api/internal/platform/repository/sql/ent/localkey"
	"github.com/bloock/bloock-managed-api/internal/platform/repository/sql/ent/predicate"
	"github.com/bloock/bloock-sdk-go/v2/entity/key"
)

// LocalKeyUpdate is the builder for updating LocalKey entities.
type LocalKeyUpdate struct {
	config
	hooks    []Hook
	mutation *LocalKeyMutation
}

// Where appends a list predicates to the LocalKeyUpdate builder.
func (lku *LocalKeyUpdate) Where(ps ...predicate.LocalKey) *LocalKeyUpdate {
	lku.mutation.Where(ps...)
	return lku
}

// SetLocalKey sets the "local_key" field.
func (lku *LocalKeyUpdate) SetLocalKey(kk *key.LocalKey) *LocalKeyUpdate {
	lku.mutation.SetLocalKey(kk)
	return lku
}

// SetKeyType sets the "key_type" field.
func (lku *LocalKeyUpdate) SetKeyType(s string) *LocalKeyUpdate {
	lku.mutation.SetKeyType(s)
	return lku
}

// Mutation returns the LocalKeyMutation object of the builder.
func (lku *LocalKeyUpdate) Mutation() *LocalKeyMutation {
	return lku.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (lku *LocalKeyUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, lku.sqlSave, lku.mutation, lku.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (lku *LocalKeyUpdate) SaveX(ctx context.Context) int {
	affected, err := lku.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (lku *LocalKeyUpdate) Exec(ctx context.Context) error {
	_, err := lku.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (lku *LocalKeyUpdate) ExecX(ctx context.Context) {
	if err := lku.Exec(ctx); err != nil {
		panic(err)
	}
}

func (lku *LocalKeyUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(localkey.Table, localkey.Columns, sqlgraph.NewFieldSpec(localkey.FieldID, field.TypeUUID))
	if ps := lku.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := lku.mutation.LocalKey(); ok {
		_spec.SetField(localkey.FieldLocalKey, field.TypeJSON, value)
	}
	if value, ok := lku.mutation.KeyType(); ok {
		_spec.SetField(localkey.FieldKeyType, field.TypeString, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, lku.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{localkey.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	lku.mutation.done = true
	return n, nil
}

// LocalKeyUpdateOne is the builder for updating a single LocalKey entity.
type LocalKeyUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *LocalKeyMutation
}

// SetLocalKey sets the "local_key" field.
func (lkuo *LocalKeyUpdateOne) SetLocalKey(kk *key.LocalKey) *LocalKeyUpdateOne {
	lkuo.mutation.SetLocalKey(kk)
	return lkuo
}

// SetKeyType sets the "key_type" field.
func (lkuo *LocalKeyUpdateOne) SetKeyType(s string) *LocalKeyUpdateOne {
	lkuo.mutation.SetKeyType(s)
	return lkuo
}

// Mutation returns the LocalKeyMutation object of the builder.
func (lkuo *LocalKeyUpdateOne) Mutation() *LocalKeyMutation {
	return lkuo.mutation
}

// Where appends a list predicates to the LocalKeyUpdate builder.
func (lkuo *LocalKeyUpdateOne) Where(ps ...predicate.LocalKey) *LocalKeyUpdateOne {
	lkuo.mutation.Where(ps...)
	return lkuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (lkuo *LocalKeyUpdateOne) Select(field string, fields ...string) *LocalKeyUpdateOne {
	lkuo.fields = append([]string{field}, fields...)
	return lkuo
}

// Save executes the query and returns the updated LocalKey entity.
func (lkuo *LocalKeyUpdateOne) Save(ctx context.Context) (*LocalKey, error) {
	return withHooks(ctx, lkuo.sqlSave, lkuo.mutation, lkuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (lkuo *LocalKeyUpdateOne) SaveX(ctx context.Context) *LocalKey {
	node, err := lkuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (lkuo *LocalKeyUpdateOne) Exec(ctx context.Context) error {
	_, err := lkuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (lkuo *LocalKeyUpdateOne) ExecX(ctx context.Context) {
	if err := lkuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (lkuo *LocalKeyUpdateOne) sqlSave(ctx context.Context) (_node *LocalKey, err error) {
	_spec := sqlgraph.NewUpdateSpec(localkey.Table, localkey.Columns, sqlgraph.NewFieldSpec(localkey.FieldID, field.TypeUUID))
	id, ok := lkuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "LocalKey.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := lkuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, localkey.FieldID)
		for _, f := range fields {
			if !localkey.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != localkey.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := lkuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := lkuo.mutation.LocalKey(); ok {
		_spec.SetField(localkey.FieldLocalKey, field.TypeJSON, value)
	}
	if value, ok := lkuo.mutation.KeyType(); ok {
		_spec.SetField(localkey.FieldKeyType, field.TypeString, value)
	}
	_node = &LocalKey{config: lkuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, lkuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{localkey.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	lkuo.mutation.done = true
	return _node, nil
}
