// Code generated by ent, DO NOT EDIT.

package localkey

import (
	"bloock-managed-api/internal/platform/repository/sql/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.LocalKey {
	return predicate.LocalKey(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.LocalKey {
	return predicate.LocalKey(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.LocalKey {
	return predicate.LocalKey(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.LocalKey {
	return predicate.LocalKey(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.LocalKey {
	return predicate.LocalKey(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.LocalKey {
	return predicate.LocalKey(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.LocalKey {
	return predicate.LocalKey(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.LocalKey {
	return predicate.LocalKey(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.LocalKey {
	return predicate.LocalKey(sql.FieldLTE(FieldID, id))
}

// KeyType applies equality check predicate on the "key_type" field. It's identical to KeyTypeEQ.
func KeyType(v string) predicate.LocalKey {
	return predicate.LocalKey(sql.FieldEQ(FieldKeyType, v))
}

// KeyTypeEQ applies the EQ predicate on the "key_type" field.
func KeyTypeEQ(v string) predicate.LocalKey {
	return predicate.LocalKey(sql.FieldEQ(FieldKeyType, v))
}

// KeyTypeNEQ applies the NEQ predicate on the "key_type" field.
func KeyTypeNEQ(v string) predicate.LocalKey {
	return predicate.LocalKey(sql.FieldNEQ(FieldKeyType, v))
}

// KeyTypeIn applies the In predicate on the "key_type" field.
func KeyTypeIn(vs ...string) predicate.LocalKey {
	return predicate.LocalKey(sql.FieldIn(FieldKeyType, vs...))
}

// KeyTypeNotIn applies the NotIn predicate on the "key_type" field.
func KeyTypeNotIn(vs ...string) predicate.LocalKey {
	return predicate.LocalKey(sql.FieldNotIn(FieldKeyType, vs...))
}

// KeyTypeGT applies the GT predicate on the "key_type" field.
func KeyTypeGT(v string) predicate.LocalKey {
	return predicate.LocalKey(sql.FieldGT(FieldKeyType, v))
}

// KeyTypeGTE applies the GTE predicate on the "key_type" field.
func KeyTypeGTE(v string) predicate.LocalKey {
	return predicate.LocalKey(sql.FieldGTE(FieldKeyType, v))
}

// KeyTypeLT applies the LT predicate on the "key_type" field.
func KeyTypeLT(v string) predicate.LocalKey {
	return predicate.LocalKey(sql.FieldLT(FieldKeyType, v))
}

// KeyTypeLTE applies the LTE predicate on the "key_type" field.
func KeyTypeLTE(v string) predicate.LocalKey {
	return predicate.LocalKey(sql.FieldLTE(FieldKeyType, v))
}

// KeyTypeContains applies the Contains predicate on the "key_type" field.
func KeyTypeContains(v string) predicate.LocalKey {
	return predicate.LocalKey(sql.FieldContains(FieldKeyType, v))
}

// KeyTypeHasPrefix applies the HasPrefix predicate on the "key_type" field.
func KeyTypeHasPrefix(v string) predicate.LocalKey {
	return predicate.LocalKey(sql.FieldHasPrefix(FieldKeyType, v))
}

// KeyTypeHasSuffix applies the HasSuffix predicate on the "key_type" field.
func KeyTypeHasSuffix(v string) predicate.LocalKey {
	return predicate.LocalKey(sql.FieldHasSuffix(FieldKeyType, v))
}

// KeyTypeEqualFold applies the EqualFold predicate on the "key_type" field.
func KeyTypeEqualFold(v string) predicate.LocalKey {
	return predicate.LocalKey(sql.FieldEqualFold(FieldKeyType, v))
}

// KeyTypeContainsFold applies the ContainsFold predicate on the "key_type" field.
func KeyTypeContainsFold(v string) predicate.LocalKey {
	return predicate.LocalKey(sql.FieldContainsFold(FieldKeyType, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.LocalKey) predicate.LocalKey {
	return predicate.LocalKey(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.LocalKey) predicate.LocalKey {
	return predicate.LocalKey(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.LocalKey) predicate.LocalKey {
	return predicate.LocalKey(sql.NotPredicates(p))
}
