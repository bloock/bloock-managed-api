// Code generated by ent, DO NOT EDIT.

package certification

import (
	"bloock-managed-api/internal/platform/repository/sql/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.Certification {
	return predicate.Certification(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.Certification {
	return predicate.Certification(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.Certification {
	return predicate.Certification(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.Certification {
	return predicate.Certification(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.Certification {
	return predicate.Certification(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.Certification {
	return predicate.Certification(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.Certification {
	return predicate.Certification(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.Certification {
	return predicate.Certification(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.Certification {
	return predicate.Certification(sql.FieldLTE(FieldID, id))
}

// AnchorID applies equality check predicate on the "anchor_id" field. It's identical to AnchorIDEQ.
func AnchorID(v int) predicate.Certification {
	return predicate.Certification(sql.FieldEQ(FieldAnchorID, v))
}

// Hash applies equality check predicate on the "hash" field. It's identical to HashEQ.
func Hash(v string) predicate.Certification {
	return predicate.Certification(sql.FieldEQ(FieldHash, v))
}

// AnchorIDEQ applies the EQ predicate on the "anchor_id" field.
func AnchorIDEQ(v int) predicate.Certification {
	return predicate.Certification(sql.FieldEQ(FieldAnchorID, v))
}

// AnchorIDNEQ applies the NEQ predicate on the "anchor_id" field.
func AnchorIDNEQ(v int) predicate.Certification {
	return predicate.Certification(sql.FieldNEQ(FieldAnchorID, v))
}

// AnchorIDIn applies the In predicate on the "anchor_id" field.
func AnchorIDIn(vs ...int) predicate.Certification {
	return predicate.Certification(sql.FieldIn(FieldAnchorID, vs...))
}

// AnchorIDNotIn applies the NotIn predicate on the "anchor_id" field.
func AnchorIDNotIn(vs ...int) predicate.Certification {
	return predicate.Certification(sql.FieldNotIn(FieldAnchorID, vs...))
}

// AnchorIDGT applies the GT predicate on the "anchor_id" field.
func AnchorIDGT(v int) predicate.Certification {
	return predicate.Certification(sql.FieldGT(FieldAnchorID, v))
}

// AnchorIDGTE applies the GTE predicate on the "anchor_id" field.
func AnchorIDGTE(v int) predicate.Certification {
	return predicate.Certification(sql.FieldGTE(FieldAnchorID, v))
}

// AnchorIDLT applies the LT predicate on the "anchor_id" field.
func AnchorIDLT(v int) predicate.Certification {
	return predicate.Certification(sql.FieldLT(FieldAnchorID, v))
}

// AnchorIDLTE applies the LTE predicate on the "anchor_id" field.
func AnchorIDLTE(v int) predicate.Certification {
	return predicate.Certification(sql.FieldLTE(FieldAnchorID, v))
}

// HashEQ applies the EQ predicate on the "hash" field.
func HashEQ(v string) predicate.Certification {
	return predicate.Certification(sql.FieldEQ(FieldHash, v))
}

// HashNEQ applies the NEQ predicate on the "hash" field.
func HashNEQ(v string) predicate.Certification {
	return predicate.Certification(sql.FieldNEQ(FieldHash, v))
}

// HashIn applies the In predicate on the "hash" field.
func HashIn(vs ...string) predicate.Certification {
	return predicate.Certification(sql.FieldIn(FieldHash, vs...))
}

// HashNotIn applies the NotIn predicate on the "hash" field.
func HashNotIn(vs ...string) predicate.Certification {
	return predicate.Certification(sql.FieldNotIn(FieldHash, vs...))
}

// HashGT applies the GT predicate on the "hash" field.
func HashGT(v string) predicate.Certification {
	return predicate.Certification(sql.FieldGT(FieldHash, v))
}

// HashGTE applies the GTE predicate on the "hash" field.
func HashGTE(v string) predicate.Certification {
	return predicate.Certification(sql.FieldGTE(FieldHash, v))
}

// HashLT applies the LT predicate on the "hash" field.
func HashLT(v string) predicate.Certification {
	return predicate.Certification(sql.FieldLT(FieldHash, v))
}

// HashLTE applies the LTE predicate on the "hash" field.
func HashLTE(v string) predicate.Certification {
	return predicate.Certification(sql.FieldLTE(FieldHash, v))
}

// HashContains applies the Contains predicate on the "hash" field.
func HashContains(v string) predicate.Certification {
	return predicate.Certification(sql.FieldContains(FieldHash, v))
}

// HashHasPrefix applies the HasPrefix predicate on the "hash" field.
func HashHasPrefix(v string) predicate.Certification {
	return predicate.Certification(sql.FieldHasPrefix(FieldHash, v))
}

// HashHasSuffix applies the HasSuffix predicate on the "hash" field.
func HashHasSuffix(v string) predicate.Certification {
	return predicate.Certification(sql.FieldHasSuffix(FieldHash, v))
}

// HashEqualFold applies the EqualFold predicate on the "hash" field.
func HashEqualFold(v string) predicate.Certification {
	return predicate.Certification(sql.FieldEqualFold(FieldHash, v))
}

// HashContainsFold applies the ContainsFold predicate on the "hash" field.
func HashContainsFold(v string) predicate.Certification {
	return predicate.Certification(sql.FieldContainsFold(FieldHash, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Certification) predicate.Certification {
	return predicate.Certification(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Certification) predicate.Certification {
	return predicate.Certification(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Certification) predicate.Certification {
	return predicate.Certification(func(s *sql.Selector) {
		p(s.Not())
	})
}
