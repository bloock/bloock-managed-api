// Code generated by ent, DO NOT EDIT.

package certification

import (
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the certification type in the database.
	Label = "certification"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldAnchorID holds the string denoting the anchor_id field in the database.
	FieldAnchorID = "anchor_id"
	// FieldHash holds the string denoting the hash field in the database.
	FieldHash = "hash"
	// FieldDataID holds the string denoting the data_id field in the database.
	FieldDataID = "data_id"
	// Table holds the table name of the certification in the database.
	Table = "certifications"
)

// Columns holds all SQL columns for certification fields.
var Columns = []string{
	FieldID,
	FieldAnchorID,
	FieldHash,
	FieldDataID,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// AnchorIDValidator is a validator for the "anchor_id" field. It is called by the builders before save.
	AnchorIDValidator func(int) error
	// HashValidator is a validator for the "hash" field. It is called by the builders before save.
	HashValidator func(string) error
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)

// OrderOption defines the ordering options for the Certification queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByAnchorID orders the results by the anchor_id field.
func ByAnchorID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAnchorID, opts...).ToFunc()
}

// ByHash orders the results by the hash field.
func ByHash(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldHash, opts...).ToFunc()
}

// ByDataID orders the results by the data_id field.
func ByDataID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDataID, opts...).ToFunc()
}
