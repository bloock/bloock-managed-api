// Code generated by MockGen. DO NOT EDIT.
// Source: internal/platform/repository/sql/connection/sql_connector.go

// Package mock_connection is a generated GoMock package.
package mock_connection

import (
	reflect "reflect"

	ent "github.com/bloock/bloock-managed-api/internal/platform/repository/sql/ent"
	gomock "github.com/golang/mock/gomock"
)

// MockSQLConnector is a mock of SQLConnector interface.
type MockSQLConnector struct {
	ctrl     *gomock.Controller
	recorder *MockSQLConnectorMockRecorder
}

// MockSQLConnectorMockRecorder is the mock recorder for MockSQLConnector.
type MockSQLConnectorMockRecorder struct {
	mock *MockSQLConnector
}

// NewMockSQLConnector creates a new mock instance.
func NewMockSQLConnector(ctrl *gomock.Controller) *MockSQLConnector {
	mock := &MockSQLConnector{ctrl: ctrl}
	mock.recorder = &MockSQLConnectorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSQLConnector) EXPECT() *MockSQLConnectorMockRecorder {
	return m.recorder
}

// Connect mocks base method.
func (m *MockSQLConnector) Connect(driver, connectionURL string) (*ent.Client, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Connect", driver, connectionURL)
	ret0, _ := ret[0].(*ent.Client)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Connect indicates an expected call of Connect.
func (mr *MockSQLConnectorMockRecorder) Connect(driver, connectionURL interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Connect", reflect.TypeOf((*MockSQLConnector)(nil).Connect), driver, connectionURL)
}
